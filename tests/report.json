{"report": {"environment": {"Python": "3.6.1", "Platform": "Darwin-16.5.0-x86_64-i386-64bit"}, "tests": [{"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple1", "duration": 0.28478479385375977, "run_index": 0, "setup": {"name": "setup", "duration": 0.085662841796875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.11007905006408691, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0033800601959228516, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple2", "duration": 0.15003681182861328, "run_index": 1, "setup": {"name": "setup", "duration": 0.018027067184448242, "outcome": "passed"}, "call": {"name": "call", "duration": 0.11092782020568848, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104961dd8>\nirc_session = <chirc.tests.common.IRCSession object at 0x10495a0b8>\n\n    def test_connect_simple2(self, irc_session):\n        \"\"\"\n            Sends a USER command followed by a NICK command, and expects\n            to receive, at least, a RPL_WELCOME reply.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"USER user1 * * :User One\\r\\n\",\n                         \"NICK user1\\r\\n\"],\n                        wait=0.05)\n    \n        irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"user1\", expect_nparams = 1,\n>                             long_param_re= \"Welcome to the Internet Relay Network user1!user1@.*\")\n\ntests/chirc/tests/test_connection.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:356: in get_reply\n    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)\ntests/chirc/tests/common.py:431: in verify_reply\n    long_param_re = long_param_re, long_param_values = long_param_values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x10495a0b8>\nmsg = <chirc.types.IRCMessage object at 0x10499ff28>, expect_prefix = True\nexpect_cmd = '001', expect_nparams = 2, expect_short_params = ['user1']\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1@.*'\nlong_param_values = None\n\n    def verify_message(self, msg, expect_prefix = None, expect_cmd = None,\n                      expect_nparams = None, expect_short_params = None,\n                      long_param_re = None, long_param_values = None):\n    \n        if expect_prefix != None and expect_prefix:\n>           assert msg.prefix is not None, \"Expected a prefix, but got none.\\nMessage: {}\".format(msg.raw(bookends=True))\nE           AssertionError: Expected a prefix, but got none.\nE           Message: |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:380: AssertionError"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0030548572540283203, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once", "duration": 0.14166688919067383, "run_index": 2, "setup": {"name": "setup", "duration": 0.01620769500732422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10643768310546875, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104aad898>\nclient = <chirc.client.ChircClient object at 0x104aadbe0>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104aadbe0>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestBasicConnection object at 0x1049bbf60>\nirc_session = <chirc.tests.common.IRCSession object at 0x104aad898>\n\n    def test_connect_both_messages_at_once(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command in the same TCP packet. This tests that\n            the server doesn't (incorrectly) assume that calling recv() will always\n            return a single message.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw(\"NICK user1\\r\\nUSER user1 * * :User One\\r\\n\")\n    \n>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"user1\", expect_nparams = 1)\n\ntests/chirc/tests/test_connection.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104aad898>\nclient = <chirc.client.ChircClient object at 0x104aadbe0>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0028138160705566406, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1", "duration": 0.2517831325531006, "run_index": 3, "setup": {"name": "setup", "duration": 0.01761007308959961, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21363186836242676, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104b7a400>\nclient = <chirc.client.ChircClient object at 0x104b7a978>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104b7a978>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestBasicConnection object at 0x104b7a160>\nirc_session = <chirc.tests.common.IRCSession object at 0x104b7a400>\n\n    def test_connect_partitioned_messages1(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK \",\n                         \"user1\\r\\nUSER user1 * * :User One\\r\\n\"],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"user1\", expect_nparams = 1)\n\ntests/chirc/tests/test_connection.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104b7a400>\nclient = <chirc.client.ChircClient object at 0x104b7a978>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0029311180114746094, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2", "duration": 0.1459794044494629, "run_index": 4, "setup": {"name": "setup", "duration": 0.01721978187561035, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10874485969543457, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104aad160>\nirc_session = <chirc.tests.common.IRCSession object at 0x104aad5f8>\n\n    def test_connect_partitioned_messages2(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK user1\\r\\nUSER user1 \",\n                         \"* * :User One\\r\\n\"],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"user1\", expect_nparams = 1)\n\ntests/chirc/tests/test_connection.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:356: in get_reply\n    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)\ntests/chirc/tests/common.py:431: in verify_reply\n    long_param_re = long_param_re, long_param_values = long_param_values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104aad5f8>\nmsg = <chirc.types.IRCMessage object at 0x104b2be10>, expect_prefix = True\nexpect_cmd = '001', expect_nparams = 2, expect_short_params = ['user1']\nlong_param_re = None, long_param_values = None\n\n    def verify_message(self, msg, expect_prefix = None, expect_cmd = None,\n                      expect_nparams = None, expect_short_params = None,\n                      long_param_re = None, long_param_values = None):\n    \n        if expect_prefix != None and expect_prefix:\n>           assert msg.prefix is not None, \"Expected a prefix, but got none.\\nMessage: {}\".format(msg.raw(bookends=True))\nE           AssertionError: Expected a prefix, but got none.\nE           Message: |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:380: AssertionError"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002794981002807617, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3", "duration": 0.24974513053894043, "run_index": 5, "setup": {"name": "setup", "duration": 0.017247915267944336, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21213221549987793, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104d9deb8>\nclient = <chirc.client.ChircClient object at 0x104e05278>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104e05278>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestBasicConnection object at 0x104d9d3c8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104d9deb8>\n\n    def test_connect_partitioned_messages3(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK user1\",\n                         \"\\r\\nUSER user1 * * :User One\\r\\n\"],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"user1\", expect_nparams = 1)\n\ntests/chirc/tests/test_connection.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104d9deb8>\nclient = <chirc.client.ChircClient object at 0x104e05278>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003117084503173828, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4", "duration": 0.14460015296936035, "run_index": 6, "setup": {"name": "setup", "duration": 0.015797138214111328, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10949110984802246, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104e127b8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104950c50>\n\n    def test_connect_partitioned_messages4(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK user1\\r\\nUSER user1 * * :User One\",\n                         \"\\r\\n\"],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"user1\", expect_nparams = 1)\n\ntests/chirc/tests/test_connection.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:356: in get_reply\n    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)\ntests/chirc/tests/common.py:431: in verify_reply\n    long_param_re = long_param_re, long_param_values = long_param_values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104950c50>\nmsg = <chirc.types.IRCMessage object at 0x104e122b0>, expect_prefix = True\nexpect_cmd = '001', expect_nparams = 2, expect_short_params = ['user1']\nlong_param_re = None, long_param_values = None\n\n    def verify_message(self, msg, expect_prefix = None, expect_cmd = None,\n                      expect_nparams = None, expect_short_params = None,\n                      long_param_re = None, long_param_values = None):\n    \n        if expect_prefix != None and expect_prefix:\n>           assert msg.prefix is not None, \"Expected a prefix, but got none.\\nMessage: {}\".format(msg.raw(bookends=True))\nE           AssertionError: Expected a prefix, but got none.\nE           Message: |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:380: AssertionError"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0035147666931152344, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5", "duration": 0.2510960102081299, "run_index": 7, "setup": {"name": "setup", "duration": 0.01695394515991211, "outcome": "passed"}, "call": {"name": "call", "duration": 0.2140491008758545, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003139019012451172, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6", "duration": 0.30815577507019043, "run_index": 8, "setup": {"name": "setup", "duration": 0.017921924591064453, "outcome": "passed"}, "call": {"name": "call", "duration": 0.2691679000854492, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0031440258026123047, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7", "duration": 0.7326159477233887, "run_index": 9, "setup": {"name": "setup", "duration": 0.016267061233520508, "outcome": "passed"}, "call": {"name": "call", "duration": 0.696624755859375, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104e05668>\nclient = <chirc.client.ChircClient object at 0x104e055f8>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104e055f8>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestBasicConnection object at 0x104e19710>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e05668>\n\n    def test_connect_partitioned_messages7(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NI\",\n                         \"CK \",\n                         \"user1\\r\",\n                         \"\\n\",\n                         \"USER user\",\n                         \"1 * * \",\n                         \":Us\",\n                         \"er \",\n                         \"One\",\n                         \"\\r\",\n                         \"\\n\"],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"user1\", expect_nparams = 1)\n\ntests/chirc/tests/test_connection.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e05668>\nclient = <chirc.client.ChircClient object at 0x104e055f8>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0034570693969726562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1", "duration": 0.14758992195129395, "run_index": 10, "setup": {"name": "setup", "duration": 0.018133878707885742, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10848307609558105, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104e192e8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e19630>\n\n    def test_connect_nick_user_parsing1(self, irc_session):\n        \"\"\"\n            Tests that the server is actually parsing the NICK and USER parameters\n            (as opposed to just hardcoding \"nick1\" and \"user1\" which is used in\n            other tests.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK nick42\\r\\n\",\n                         \"USER user42 * * :User Forty Two\\r\\n\"],\n                        wait=0.05)\n    \n        irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"nick42\", expect_nparams = 1,\n>                             long_param_re= \"Welcome to the Internet Relay Network nick42!user42@.*\")\n\ntests/chirc/tests/test_connection.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:356: in get_reply\n    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)\ntests/chirc/tests/common.py:431: in verify_reply\n    long_param_re = long_param_re, long_param_values = long_param_values)\ntests/chirc/tests/common.py:404: in verify_message\n    self._assert_is_not_none(match, \"|||%s||| <-- Long parameter does not match regular expression: %s\" % (lp, lpre), irc_msg = msg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e19630>, a = None\nexplanation = '|||:Welcome to the Internet Relay Network nick42!nick42@localhost||| <-- Long parameter does not match regular expres...2@.*$\\n\\nMESSAGE: |||:MacBook-Pro-5.local 001 nick42 :Welcome to the Internet Relay Network nick42!nick42@localhost|||'\nirc_msg = <chirc.types.IRCMessage object at 0x104e05f98>\n\n    def _assert_is_not_none(self, a, explanation, irc_msg = None):\n        if irc_msg is not None:\n            explanation = explanation + \"\\n\\nMESSAGE: {}\".format(irc_msg.raw(bookends=True))\n    \n>       assert a is not None, explanation\nE       AssertionError: |||:Welcome to the Internet Relay Network nick42!nick42@localhost||| <-- Long parameter does not match regular expression: ^:Welcome to the Internet Relay Network nick42!user42@.*$\nE       \nE       MESSAGE: |||:MacBook-Pro-5.local 001 nick42 :Welcome to the Internet Relay Network nick42!nick42@localhost|||\n\ntests/chirc/tests/common.py:56: AssertionError"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0028390884399414062, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2", "duration": 0.2500588893890381, "run_index": 11, "setup": {"name": "setup", "duration": 0.014925003051757812, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21729183197021484, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104e17208>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e17a20>\n\n    def test_connect_nick_user_parsing2(self, irc_session):\n        \"\"\"\n            Tests that the server is actually parsing the NICK and USER parameters\n            (as opposed to just hardcoding \"nick1\" and \"user1\" which is used in\n            other tests. Additionally, partitions the messages.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK nick4\",\n                         \"2\\r\\n\",\n                         \"USER user4\",\n                         \"2 * * :User Forty Two\\r\\n\"],\n                        wait=0.05)\n    \n        irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"nick42\", expect_nparams = 1,\n>                             long_param_re= \"Welcome to the Internet Relay Network nick42!user42@.*\")\n\ntests/chirc/tests/test_connection.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:356: in get_reply\n    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)\ntests/chirc/tests/common.py:431: in verify_reply\n    long_param_re = long_param_re, long_param_values = long_param_values)\ntests/chirc/tests/common.py:404: in verify_message\n    self._assert_is_not_none(match, \"|||%s||| <-- Long parameter does not match regular expression: %s\" % (lp, lpre), irc_msg = msg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e17a20>, a = None\nexplanation = '|||:Welcome to the Internet Relay Network nick42!nick42@localhost||| <-- Long parameter does not match regular expres...2@.*$\\n\\nMESSAGE: |||:MacBook-Pro-5.local 001 nick42 :Welcome to the Internet Relay Network nick42!nick42@localhost|||'\nirc_msg = <chirc.types.IRCMessage object at 0x104e43d30>\n\n    def _assert_is_not_none(self, a, explanation, irc_msg = None):\n        if irc_msg is not None:\n            explanation = explanation + \"\\n\\nMESSAGE: {}\".format(irc_msg.raw(bookends=True))\n    \n>       assert a is not None, explanation\nE       AssertionError: |||:Welcome to the Internet Relay Network nick42!nick42@localhost||| <-- Long parameter does not match regular expression: ^:Welcome to the Internet Relay Network nick42!user42@.*$\nE       \nE       MESSAGE: |||:MacBook-Pro-5.local 001 nick42 :Welcome to the Internet Relay Network nick42!nick42@localhost|||\n\ntests/chirc/tests/common.py:56: AssertionError"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002917051315307617, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3", "duration": 0.5690665245056152, "run_index": 12, "setup": {"name": "setup", "duration": 0.01619577407836914, "outcome": "passed"}, "call": {"name": "call", "duration": 0.5338420867919922, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104e1d2e8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e1dba8>\n\n    def test_connect_nick_user_parsing3(self, irc_session):\n        \"\"\"\n            Tests that the server is actually parsing the NICK and USER parameters\n            (as opposed to just hardcoding \"nick1\" and \"user1\" which is used in\n            other tests. Additionally, partitions the messages.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK nick4\",\n                         \"2\",\n                         \"4\",\n                         \"2\",\n                         \"\\r\\n\",\n                         \"USER user4\",\n                         \"2\",\n                         \"4\",\n                         \"2\",\n                         \" * * :User Four Thousand Two Hundred and Forty Two\\r\\n\"],\n                        wait=0.05)\n    \n        irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"nick4242\", expect_nparams = 1,\n>                             long_param_re= \"Welcome to the Internet Relay Network nick4242!user4242@.*\")\n\ntests/chirc/tests/test_connection.py:242: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:356: in get_reply\n    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)\ntests/chirc/tests/common.py:431: in verify_reply\n    long_param_re = long_param_re, long_param_values = long_param_values)\ntests/chirc/tests/common.py:404: in verify_message\n    self._assert_is_not_none(match, \"|||%s||| <-- Long parameter does not match regular expression: %s\" % (lp, lpre), irc_msg = msg)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e1dba8>, a = None\nexplanation = '|||:Welcome to the Internet Relay Network nick4242!nick4242@localhost||| <-- Long parameter does not match regular ex...n\\nMESSAGE: |||:MacBook-Pro-5.local 001 nick4242 :Welcome to the Internet Relay Network nick4242!nick4242@localhost|||'\nirc_msg = <chirc.types.IRCMessage object at 0x104e1d908>\n\n    def _assert_is_not_none(self, a, explanation, irc_msg = None):\n        if irc_msg is not None:\n            explanation = explanation + \"\\n\\nMESSAGE: {}\".format(irc_msg.raw(bookends=True))\n    \n>       assert a is not None, explanation\nE       AssertionError: |||:Welcome to the Internet Relay Network nick4242!nick4242@localhost||| <-- Long parameter does not match regular expression: ^:Welcome to the Internet Relay Network nick4242!user4242@.*$\nE       \nE       MESSAGE: |||:MacBook-Pro-5.local 001 nick4242 :Welcome to the Internet Relay Network nick4242!nick4242@localhost|||\n\ntests/chirc/tests/common.py:56: AssertionError"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0028328895568847656, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing4", "duration": 0.3073441982269287, "run_index": 13, "setup": {"name": "setup", "duration": 0.016453266143798828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.2703268527984619, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104e196d8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e3dd68>\n\n    def test_connect_nick_user_parsing4(self, irc_session):\n        \"\"\"\n            Tests that the server only uses the last NICK message sent during\n            the registration phase.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK nick1\\r\\n\",\n                         \"NICK nick2\\r\\n\",\n                         \"NICK nick3\\r\\n\",\n                         \"NICK nick42\\r\\n\",\n                         \"USER user42 * * :User Forty Two\\r\\n\"],\n                        wait=0.05)\n    \n        irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"nick42\", expect_nparams = 1,\n>                             long_param_re= \"Welcome to the Internet Relay Network nick42!user42@.*\")\n\ntests/chirc/tests/test_connection.py:260: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:356: in get_reply\n    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)\ntests/chirc/tests/common.py:431: in verify_reply\n    long_param_re = long_param_re, long_param_values = long_param_values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e3dd68>\nmsg = <chirc.types.IRCMessage object at 0x104e3dfd0>, expect_prefix = True\nexpect_cmd = '001', expect_nparams = 2, expect_short_params = ['nick42']\nlong_param_re = 'Welcome to the Internet Relay Network nick42!user42@.*'\nlong_param_values = None\n\n    def verify_message(self, msg, expect_prefix = None, expect_cmd = None,\n                      expect_nparams = None, expect_short_params = None,\n                      long_param_re = None, long_param_values = None):\n    \n        if expect_prefix != None and expect_prefix:\n>           assert msg.prefix is not None, \"Expected a prefix, but got none.\\nMessage: {}\".format(msg.raw(bookends=True))\nE           AssertionError: Expected a prefix, but got none.\nE           Message: |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:380: AssertionError"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004110813140869141, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing5", "duration": 0.3134772777557373, "run_index": 14, "setup": {"name": "setup", "duration": 0.017618179321289062, "outcome": "passed"}, "call": {"name": "call", "duration": 0.27501893043518066, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104e2b7b8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e2b828>\n\n    def test_connect_nick_user_parsing5(self, irc_session):\n        \"\"\"\n            Tests that the server only uses the last USER message sent during\n            the registration phase.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"USER user1 * * :User One\\r\\n\",\n                         \"USER user2 * * :User Two\\r\\n\",\n                         \"USER user3 * * :User Three\\r\\n\",\n                         \"USER user42 * * :User Forty Two\\r\\n\",\n                         \"NICK nick42\\r\\n\",\n                         ],\n                        wait=0.05)\n    \n        irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick=\"nick42\", expect_nparams = 1,\n>                             long_param_re= \"Welcome to the Internet Relay Network nick42!user42@.*\")\n\ntests/chirc/tests/test_connection.py:279: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:356: in get_reply\n    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)\ntests/chirc/tests/common.py:431: in verify_reply\n    long_param_re = long_param_re, long_param_values = long_param_values)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e2b828>\nmsg = <chirc.types.IRCMessage object at 0x104e52978>, expect_prefix = True\nexpect_cmd = '001', expect_nparams = 2, expect_short_params = ['nick42']\nlong_param_re = 'Welcome to the Internet Relay Network nick42!user42@.*'\nlong_param_values = None\n\n    def verify_message(self, msg, expect_prefix = None, expect_cmd = None,\n                      expect_nparams = None, expect_short_params = None,\n                      long_param_re = None, long_param_values = None):\n    \n        if expect_prefix != None and expect_prefix:\n>           assert msg.prefix is not None, \"Expected a prefix, but got none.\\nMessage: {}\".format(msg.raw(bookends=True))\nE           AssertionError: Expected a prefix, but got none.\nE           Message: |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:380: AssertionError"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0032219886779785156, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1", "duration": 0.14255595207214355, "run_index": 15, "setup": {"name": "setup", "duration": 0.016212940216064453, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10654807090759277, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003582000732421875, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2", "duration": 0.14686942100524902, "run_index": 16, "setup": {"name": "setup", "duration": 0.01807117462158203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10659503936767578, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.00413203239440918, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3", "duration": 0.2480909824371338, "run_index": 17, "setup": {"name": "setup", "duration": 0.016206026077270508, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21162891387939453, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004050016403198242, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome4", "duration": 0.14521574974060059, "run_index": 18, "setup": {"name": "setup", "duration": 0.016516923904418945, "outcome": "passed"}, "call": {"name": "call", "duration": 0.1093297004699707, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104e3d0b8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e962b0>\n\n    def test_connect_no_unexpected_welcome4(self, irc_session):\n        \"\"\"\n            Sends two USER commands, but no NICK, so no RPL_WELCOME should be sent.\n            (tests that the server isn't just unconditionally sending the welcome\n            messages after receiving two messages)\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"USER user1 * * :User One\\r\\n\",\n                         \"USER user2 * * :User Two\\r\\n\"],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_timeout = True)\n\ntests/chirc/tests/test_connection.py:333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e962b0>\nclient = <chirc.client.ChircClient object at 0x104e96128>, expect_code = None\nexpect_nick = None, expect_nparams = None, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = True\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n>               pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\nE               Failed: Was not expecting a reply, but got one:\nE               |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:343: Failed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002852201461791992, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome5", "duration": 0.14444947242736816, "run_index": 19, "setup": {"name": "setup", "duration": 0.015488147735595703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.11066222190856934, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104ea7fd0>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e78da0>\n\n    def test_connect_no_unexpected_welcome5(self, irc_session):\n        \"\"\"\n            Sends two NICK commands, but no USER, so no RPL_WELCOME should be sent.\n            (tests that the server isn't just unconditionally sending the welcome\n            messages after receiving two messages)\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK user1\\r\\n\",\n                         \"NICK user2\\r\\n\"],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_timeout = True)\n\ntests/chirc/tests/test_connection.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e78da0>\nclient = <chirc.client.ChircClient object at 0x104e78128>, expect_code = None\nexpect_nick = None, expect_nparams = None, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = True\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n>               pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\nE               Failed: Was not expecting a reply, but got one:\nE               |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:343: Failed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002810955047607422, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome6", "duration": 0.3072676658630371, "run_index": 20, "setup": {"name": "setup", "duration": 0.01786971092224121, "outcome": "passed"}, "call": {"name": "call", "duration": 0.26870298385620117, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104ea76d8>\nirc_session = <chirc.tests.common.IRCSession object at 0x101cdbfd0>\n\n    def test_connect_no_unexpected_welcome6(self, irc_session):\n        \"\"\"\n            Sends multiple USER commands, but no NICK. No RPL_WELCOME should be sent.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"USER user1 * * :User One\\r\\n\",\n                         \"USER user2 * * :User Two\\r\\n\",\n                         \"USER user3 * * :User Two\\r\\n\",\n                         \"USER user4 * * :User Two\\r\\n\",\n                         \"USER user5 * * :User Two\\r\\n\",],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_timeout = True)\n\ntests/chirc/tests/test_connection.py:364: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x101cdbfd0>\nclient = <chirc.client.ChircClient object at 0x104e19240>, expect_code = None\nexpect_nick = None, expect_nparams = None, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = True\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n>               pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\nE               Failed: Was not expecting a reply, but got one:\nE               |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:343: Failed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0028252601623535156, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome7", "duration": 0.3027656078338623, "run_index": 21, "setup": {"name": "setup", "duration": 0.015133857727050781, "outcome": "passed"}, "call": {"name": "call", "duration": 0.269589900970459, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x104e6e2e8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e6e048>\n\n    def test_connect_no_unexpected_welcome7(self, irc_session):\n        \"\"\"\n            Sends multiple NICK commands, but no USER. No RPL_WELCOME should be sent.\n            \"\"\"\n    \n        client = irc_session.get_client(nodelay = True)\n    \n        client.send_raw([\"NICK user1\\r\\n\",\n                         \"NICK user2\\r\\n\",\n                         \"NICK user3\\r\\n\",\n                         \"NICK user4\\r\\n\",\n                         \"NICK user5\\r\\n\"],\n                        wait=0.05)\n    \n>       irc_session.get_reply(client, expect_timeout = True)\n\ntests/chirc/tests/test_connection.py:380: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e6e048>\nclient = <chirc.client.ChircClient object at 0x104e6e3c8>, expect_code = None\nexpect_nick = None, expect_nparams = None, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = True\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n>               pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\nE               Failed: Was not expecting a reply, but got one:\nE               |||error, nickname already in use|||\n\ntests/chirc/tests/common.py:343: Failed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002907991409301758, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1", "duration": 0.14058470726013184, "run_index": 22, "setup": {"name": "setup", "duration": 0.015492916107177734, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10683321952819824, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104e52fd0>\nclient = <chirc.client.ChircClient object at 0x104e52048>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104e52048>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104e522b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e52fd0>\n\n    def test_connect_full1(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages are sent after the NICK and USER\n            commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"NICK user1\")\n        client.send_cmd(\"USER user1 * * :User One\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:397: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e52fd0>\nclient = <chirc.client.ChircClient object at 0x104e52048>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002765655517578125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2", "duration": 0.14277172088623047, "run_index": 23, "setup": {"name": "setup", "duration": 0.016941070556640625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10604381561279297, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104e7f160>\nclient = <chirc.client.ChircClient object at 0x104e7f8d0>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104e7f8d0>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104e7f710>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e7f160>\n\n    def test_connect_full2(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages are sent after the USER and NICK\n            commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"USER user1 * * :User One\")\n        client.send_cmd(\"NICK user1\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e7f160>\nclient = <chirc.client.ChircClient object at 0x104e7f8d0>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.00284576416015625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3", "duration": 0.14203977584838867, "run_index": 24, "setup": {"name": "setup", "duration": 0.018216848373413086, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10277891159057617, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104d01160>\nclient = <chirc.client.ChircClient object at 0x104d011d0>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104d011d0>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104aad358>\nirc_session = <chirc.tests.common.IRCSession object at 0x104d01160>\n\n    def test_connect_full3(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages, as well as the LUSERS and\n            MOTD replies, are sent after the NICK and USER commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"NICK user1\")\n        client.send_cmd(\"USER user1 * * :User One\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:423: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104d01160>\nclient = <chirc.client.ChircClient object at 0x104d011d0>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002827167510986328, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users", "duration": 0.14421343803405762, "run_index": 25, "setup": {"name": "setup", "duration": 0.017785072326660156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10573506355285645, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104d0b710>\nclient = <chirc.client.ChircClient object at 0x104d0b898>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104d0b898>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestMultiuserConnection object at 0x104d0b5c0>\nirc_session = <chirc.tests.common.IRCSession object at 0x104d0b710>\n\n    def test_connect_2users(self, irc_session):\n        \"\"\"\n            Connects two clients to the server.\n            \"\"\"\n    \n>       irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104d0b710>\nclient = <chirc.client.ChircClient object at 0x104d0b898>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0029082298278808594, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick", "duration": 0.14199542999267578, "run_index": 26, "setup": {"name": "setup", "duration": 0.017554283142089844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10364699363708496, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104b27588>\nclient = <chirc.client.ChircClient object at 0x104b27080>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104b27080>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestMultiuserConnection object at 0x104b274a8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104b27588>\n\n    def test_connect_duplicate_nick(self, irc_session):\n        \"\"\"\n            Connects two clients to the server, but the second\n            client tries to use the first client's nickname\n            (and should get an ERR_NICKNAMEINUSE)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:446: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104b27588>\nclient = <chirc.client.ChircClient object at 0x104b27080>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.003239870071411133, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration1", "duration": 0.14534521102905273, "run_index": 27, "setup": {"name": "setup", "duration": 0.01816082000732422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10591530799865723, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104b502b0>\nclient = <chirc.client.ChircClient object at 0x104b50550>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104b50550>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104b503c8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104b502b0>\n\n    def test_quit_after_registration1(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            Verifies the ERROR response, but not whether the server\n            actually disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:465: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104b502b0>\nclient = <chirc.client.ChircClient object at 0x104b50550>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0031082630157470703, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration2", "duration": 0.1388993263244629, "run_index": 28, "setup": {"name": "setup", "duration": 0.015948057174682617, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10409808158874512, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104e78dd8>\nclient = <chirc.client.ChircClient object at 0x104e52b38>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104e52b38>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104e78b00>\nirc_session = <chirc.tests.common.IRCSession object at 0x104e78dd8>\n\n    def test_quit_after_registration2(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            Verifies the ERROR response and also checks whether the\n            server disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104e78dd8>\nclient = <chirc.client.ChircClient object at 0x104e52b38>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002905130386352539, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration3", "duration": 0.1446688175201416, "run_index": 29, "setup": {"name": "setup", "duration": 0.017596960067749023, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10650873184204102, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104d0b208>\nclient = <chirc.client.ChircClient object at 0x104d0b3c8>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104d0b3c8>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104d0bac8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104d0b208>\n\n    def test_quit_after_registration3(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            QUIT does not specify a message, so the default \"Client Quit\" should\n            be assumed. Also verifies the ERROR response and also checks whether the\n            server disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104d0b208>\nclient = <chirc.client.ChircClient object at 0x104d0b3c8>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002966165542602539, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration4", "duration": 0.14136886596679688, "run_index": 30, "setup": {"name": "setup", "duration": 0.015913963317871094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10630679130554199, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x1060080f0>\nclient = <chirc.client.ChircClient object at 0x10600e240>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10600e240>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x106008b38>\nirc_session = <chirc.tests.common.IRCSession object at 0x1060080f0>\n\n    def test_quit_after_registration4(self, irc_session):\n        \"\"\"\n            Connects two clients, and then has them quit, each with separate\n            messages.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:512: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x1060080f0>\nclient = <chirc.client.ChircClient object at 0x10600e240>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0032341480255126953, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 6, "failed": 25, "num_tests": 31, "duration": 7.840465784072876}, "created_at": "2017-09-07 17:23:27.053887"}}