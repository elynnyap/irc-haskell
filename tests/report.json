{"report": {"environment": {"Python": "3.6.1", "Platform": "Darwin-16.5.0-x86_64-i386-64bit"}, "tests": [{"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple1", "duration": 0.3800227642059326, "run_index": 0, "setup": {"name": "setup", "duration": 0.09662890434265137, "outcome": "passed"}, "call": {"name": "call", "duration": 0.18314599990844727, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003618955612182617, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple2", "duration": 0.14794635772705078, "run_index": 1, "setup": {"name": "setup", "duration": 0.017979145050048828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10792398452758789, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004064083099365234, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once", "duration": 0.0440061092376709, "run_index": 2, "setup": {"name": "setup", "duration": 0.018040895462036133, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0045490264892578125, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0033752918243408203, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1", "duration": 0.14521193504333496, "run_index": 3, "setup": {"name": "setup", "duration": 0.016360998153686523, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10831117630004883, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004178762435913086, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2", "duration": 0.14168477058410645, "run_index": 4, "setup": {"name": "setup", "duration": 0.01674795150756836, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10428285598754883, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0039060115814208984, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3", "duration": 0.14914917945861816, "run_index": 5, "setup": {"name": "setup", "duration": 0.01687312126159668, "outcome": "passed"}, "call": {"name": "call", "duration": 0.11161494255065918, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003787994384765625, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4", "duration": 0.14739394187927246, "run_index": 6, "setup": {"name": "setup", "duration": 0.016933917999267578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10968708992004395, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0038390159606933594, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5", "duration": 0.2541542053222656, "run_index": 7, "setup": {"name": "setup", "duration": 0.0186612606048584, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21310782432556152, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0037238597869873047, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6", "duration": 0.29967570304870605, "run_index": 8, "setup": {"name": "setup", "duration": 0.01754474639892578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.26157522201538086, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003010988235473633, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7", "duration": 0.6264934539794922, "run_index": 9, "setup": {"name": "setup", "duration": 0.01697087287902832, "outcome": "passed"}, "call": {"name": "call", "duration": 0.5887410640716553, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0038106441497802734, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1", "duration": 0.14688658714294434, "run_index": 10, "setup": {"name": "setup", "duration": 0.016051769256591797, "outcome": "passed"}, "call": {"name": "call", "duration": 0.11157989501953125, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003203153610229492, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2", "duration": 0.2581772804260254, "run_index": 11, "setup": {"name": "setup", "duration": 0.017785072326660156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.2188279628753662, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003779172897338867, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3", "duration": 0.5789890289306641, "run_index": 12, "setup": {"name": "setup", "duration": 0.018815994262695312, "outcome": "passed"}, "call": {"name": "call", "duration": 0.537614107131958, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0037429332733154297, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing4", "duration": 0.30884861946105957, "run_index": 13, "setup": {"name": "setup", "duration": 0.017238140106201172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.2705671787261963, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0038051605224609375, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing5", "duration": 0.30112385749816895, "run_index": 14, "setup": {"name": "setup", "duration": 0.01554107666015625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.26616787910461426, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0038738250732421875, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1", "duration": 0.1414496898651123, "run_index": 15, "setup": {"name": "setup", "duration": 0.017818927764892578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.1025688648223877, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003242969512939453, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2", "duration": 0.14044594764709473, "run_index": 16, "setup": {"name": "setup", "duration": 0.015193939208984375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10602283477783203, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004035234451293945, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3", "duration": 0.255218505859375, "run_index": 17, "setup": {"name": "setup", "duration": 0.01737189292907715, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21673583984375, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003738880157470703, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome4", "duration": 0.25514721870422363, "run_index": 18, "setup": {"name": "setup", "duration": 0.01907801628112793, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21299409866333008, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003997087478637695, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome5", "duration": 0.2478160858154297, "run_index": 19, "setup": {"name": "setup", "duration": 0.01634693145751953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.2110912799835205, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004030942916870117, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome6", "duration": 0.40166735649108887, "run_index": 20, "setup": {"name": "setup", "duration": 0.017731189727783203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.36211204528808594, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0040929317474365234, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome7", "duration": 0.4125101566314697, "run_index": 21, "setup": {"name": "setup", "duration": 0.016482114791870117, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3755381107330322, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004007816314697266, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1", "duration": 0.14874982833862305, "run_index": 22, "setup": {"name": "setup", "duration": 0.018146038055419922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10890483856201172, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104cc6438>\nclient = <chirc.client.ChircClient object at 0x104cc6240>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104cc6240>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104cc69e8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104cc6438>\n\n    def test_connect_full1(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages are sent after the NICK and USER\n            commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"NICK user1\")\n        client.send_cmd(\"USER user1 * * :User One\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:397: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104cc6438>\nclient = <chirc.client.ChircClient object at 0x104cc6240>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0035529136657714844, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2", "duration": 0.14621901512145996, "run_index": 23, "setup": {"name": "setup", "duration": 0.018764019012451172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.1057889461517334, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104cce940>\nclient = <chirc.client.ChircClient object at 0x104baa940>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104baa940>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104b50d30>\nirc_session = <chirc.tests.common.IRCSession object at 0x104cce940>\n\n    def test_connect_full2(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages are sent after the USER and NICK\n            commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"USER user1 * * :User One\")\n        client.send_cmd(\"NICK user1\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104cce940>\nclient = <chirc.client.ChircClient object at 0x104baa940>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0029020309448242188, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3", "duration": 0.14409399032592773, "run_index": 24, "setup": {"name": "setup", "duration": 0.01762104034423828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10563182830810547, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104ccecc0>\nclient = <chirc.client.ChircClient object at 0x104cce6d8>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104cce6d8>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104ccef28>\nirc_session = <chirc.tests.common.IRCSession object at 0x104ccecc0>\n\n    def test_connect_full3(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages, as well as the LUSERS and\n            MOTD replies, are sent after the NICK and USER commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"NICK user1\")\n        client.send_cmd(\"USER user1 * * :User One\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:423: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104ccecc0>\nclient = <chirc.client.ChircClient object at 0x104cce6d8>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.003220081329345703, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users", "duration": 0.14548611640930176, "run_index": 25, "setup": {"name": "setup", "duration": 0.017016172409057617, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10829305648803711, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104efb2e8>\nclient = <chirc.client.ChircClient object at 0x104efb668>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104efb668>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestMultiuserConnection object at 0x104efb048>\nirc_session = <chirc.tests.common.IRCSession object at 0x104efb2e8>\n\n    def test_connect_2users(self, irc_session):\n        \"\"\"\n            Connects two clients to the server.\n            \"\"\"\n    \n>       irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104efb2e8>\nclient = <chirc.client.ChircClient object at 0x104efb668>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.003160715103149414, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick", "duration": 0.14880871772766113, "run_index": 26, "setup": {"name": "setup", "duration": 0.018196821212768555, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10950088500976562, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104d6d470>\nclient = <chirc.client.ChircClient object at 0x104d6d978>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104d6d978>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestMultiuserConnection object at 0x104d6d278>\nirc_session = <chirc.tests.common.IRCSession object at 0x104d6d470>\n\n    def test_connect_duplicate_nick(self, irc_session):\n        \"\"\"\n            Connects two clients to the server, but the second\n            client tries to use the first client's nickname\n            (and should get an ERR_NICKNAMEINUSE)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:446: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104d6d470>\nclient = <chirc.client.ChircClient object at 0x104d6d978>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0029141902923583984, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration1", "duration": 0.14685320854187012, "run_index": 27, "setup": {"name": "setup", "duration": 0.016892194747924805, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10955071449279785, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104d28cc0>\nclient = <chirc.client.ChircClient object at 0x104d28f98>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104d28f98>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104edac88>\nirc_session = <chirc.tests.common.IRCSession object at 0x104d28cc0>\n\n    def test_quit_after_registration1(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            Verifies the ERROR response, but not whether the server\n            actually disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:465: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104d28cc0>\nclient = <chirc.client.ChircClient object at 0x104d28f98>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0035181045532226562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration2", "duration": 0.14747905731201172, "run_index": 28, "setup": {"name": "setup", "duration": 0.018679141998291016, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10725784301757812, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104eded30>\nclient = <chirc.client.ChircClient object at 0x104ede940>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104ede940>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104edea20>\nirc_session = <chirc.tests.common.IRCSession object at 0x104eded30>\n\n    def test_quit_after_registration2(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            Verifies the ERROR response and also checks whether the\n            server disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104eded30>\nclient = <chirc.client.ChircClient object at 0x104ede940>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0028629302978515625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration3", "duration": 0.13990187644958496, "run_index": 29, "setup": {"name": "setup", "duration": 0.01536417007446289, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10578775405883789, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104b3b0b8>\nclient = <chirc.client.ChircClient object at 0x104eb0f28>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104eb0f28>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104eb0c88>\nirc_session = <chirc.tests.common.IRCSession object at 0x104b3b0b8>\n\n    def test_quit_after_registration3(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            QUIT does not specify a message, so the default \"Client Quit\" should\n            be assumed. Also verifies the ERROR response and also checks whether the\n            server disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104b3b0b8>\nclient = <chirc.client.ChircClient object at 0x104eb0f28>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.003385782241821289, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration4", "duration": 0.14268970489501953, "run_index": 30, "setup": {"name": "setup", "duration": 0.01553487777709961, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10805702209472656, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104ecc7b8>\nclient = <chirc.client.ChircClient object at 0x104edeac8>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104edeac8>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104ecc710>\nirc_session = <chirc.tests.common.IRCSession object at 0x104ecc7b8>\n\n    def test_quit_after_registration4(self, irc_session):\n        \"\"\"\n            Connects two clients, and then has them quit, each with separate\n            messages.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:512: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x104ecc7b8>\nclient = <chirc.client.ChircClient object at 0x104edeac8>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.00356292724609375, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 22, "failed": 9, "num_tests": 31, "duration": 7.2733330726623535}, "created_at": "2017-09-11 10:42:20.767681"}}