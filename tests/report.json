{"report": {"environment": {"Python": "3.6.1", "Platform": "Darwin-16.5.0-x86_64-i386-64bit"}, "tests": [{"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple1", "duration": 0.3219881057739258, "run_index": 0, "setup": {"name": "setup", "duration": 0.09955596923828125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.11975908279418945, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003117084503173828, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple2", "duration": 0.15125560760498047, "run_index": 1, "setup": {"name": "setup", "duration": 0.018475770950317383, "outcome": "passed"}, "call": {"name": "call", "duration": 0.11111593246459961, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0031881332397460938, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once", "duration": 0.039780616760253906, "run_index": 2, "setup": {"name": "setup", "duration": 0.016759872436523438, "outcome": "passed"}, "call": {"name": "call", "duration": 0.003367900848388672, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0028929710388183594, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1", "duration": 0.14410877227783203, "run_index": 3, "setup": {"name": "setup", "duration": 0.016072750091552734, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10823607444763184, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0037271976470947266, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2", "duration": 0.15077686309814453, "run_index": 4, "setup": {"name": "setup", "duration": 0.016047000885009766, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10885500907897949, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.009827852249145508, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3", "duration": 0.14952969551086426, "run_index": 5, "setup": {"name": "setup", "duration": 0.01749420166015625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.11080217361450195, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0037391185760498047, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4", "duration": 0.14532876014709473, "run_index": 6, "setup": {"name": "setup", "duration": 0.01642894744873047, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10932707786560059, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003143787384033203, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5", "duration": 0.252932071685791, "run_index": 7, "setup": {"name": "setup", "duration": 0.01809406280517578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21303081512451172, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0037131309509277344, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6", "duration": 0.31342220306396484, "run_index": 8, "setup": {"name": "setup", "duration": 0.018291950225830078, "outcome": "passed"}, "call": {"name": "call", "duration": 0.27361321449279785, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003225088119506836, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7", "duration": 0.616574764251709, "run_index": 9, "setup": {"name": "setup", "duration": 0.017158031463623047, "outcome": "passed"}, "call": {"name": "call", "duration": 0.5784978866577148, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003760814666748047, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1", "duration": 0.14819693565368652, "run_index": 10, "setup": {"name": "setup", "duration": 0.01723003387451172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10944390296936035, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004292964935302734, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2", "duration": 0.25620365142822266, "run_index": 11, "setup": {"name": "setup", "duration": 0.01686882972717285, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21936416625976562, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003101825714111328, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3", "duration": 0.5690872669219971, "run_index": 12, "setup": {"name": "setup", "duration": 0.01612114906311035, "outcome": "passed"}, "call": {"name": "call", "duration": 0.53302001953125, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003824949264526367, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing4", "duration": 0.30957794189453125, "run_index": 13, "setup": {"name": "setup", "duration": 0.017596960067749023, "outcome": "passed"}, "call": {"name": "call", "duration": 0.27054619789123535, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0038378238677978516, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing5", "duration": 0.30611228942871094, "run_index": 14, "setup": {"name": "setup", "duration": 0.016613245010375977, "outcome": "passed"}, "call": {"name": "call", "duration": 0.2696819305419922, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003203868865966797, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1", "duration": 0.14570283889770508, "run_index": 15, "setup": {"name": "setup", "duration": 0.017626285552978516, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10640621185302734, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004044055938720703, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2", "duration": 0.14925050735473633, "run_index": 16, "setup": {"name": "setup", "duration": 0.019399166107177734, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10660910606384277, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003843069076538086, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3", "duration": 0.2508420944213867, "run_index": 17, "setup": {"name": "setup", "duration": 0.017750024795532227, "outcome": "passed"}, "call": {"name": "call", "duration": 0.2117478847503662, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0035941600799560547, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome4", "duration": 0.25697779655456543, "run_index": 18, "setup": {"name": "setup", "duration": 0.01824784278869629, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21622204780578613, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.004260063171386719, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome5", "duration": 0.25032997131347656, "run_index": 19, "setup": {"name": "setup", "duration": 0.017560958862304688, "outcome": "passed"}, "call": {"name": "call", "duration": 0.21201014518737793, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003197908401489258, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome6", "duration": 0.402634859085083, "run_index": 20, "setup": {"name": "setup", "duration": 0.014779090881347656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.36921191215515137, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003864765167236328, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome7", "duration": 0.41968369483947754, "run_index": 21, "setup": {"name": "setup", "duration": 0.019137859344482422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.37809300422668457, "outcome": "passed"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003314971923828125, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1", "duration": 0.14232587814331055, "run_index": 22, "setup": {"name": "setup", "duration": 0.01635003089904785, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10653376579284668, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104bc7b38>\nclient = <chirc.client.ChircClient object at 0x104bc75c0>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x104bc75c0>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104bc7b00>\nirc_session = <chirc.tests.common.IRCSession object at 0x104bc7b38>\n\n    def test_connect_full1(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages are sent after the NICK and USER\n            commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"NICK user1\")\n        client.send_cmd(\"USER user1 * * :User One\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:397: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x104bc7b38>\nclient = <chirc.client.ChircClient object at 0x104bc75c0>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.003092050552368164, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2", "duration": 0.14461612701416016, "run_index": 23, "setup": {"name": "setup", "duration": 0.015969038009643555, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10966300964355469, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104bc7f60>\nclient = <chirc.client.ChircClient object at 0x104bc7860>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x104bc7860>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104bb8d68>\nirc_session = <chirc.tests.common.IRCSession object at 0x104bc7f60>\n\n    def test_connect_full2(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages are sent after the USER and NICK\n            commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"USER user1 * * :User One\")\n        client.send_cmd(\"NICK user1\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x104bc7f60>\nclient = <chirc.client.ChircClient object at 0x104bc7860>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0030150413513183594, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3", "duration": 0.143082857131958, "run_index": 24, "setup": {"name": "setup", "duration": 0.01662898063659668, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10679078102111816, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104bd06a0>\nclient = <chirc.client.ChircClient object at 0x104bd0400>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x104bd0400>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestFullConnection object at 0x104bd0b70>\nirc_session = <chirc.tests.common.IRCSession object at 0x104bd06a0>\n\n    def test_connect_full3(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages, as well as the LUSERS and\n            MOTD replies, are sent after the NICK and USER commands are received.\n            \"\"\"\n    \n        client = irc_session.get_client()\n    \n        client.send_cmd(\"NICK user1\")\n        client.send_cmd(\"USER user1 * * :User One\")\n    \n>       irc_session.verify_welcome_messages(client, \"user1\")\n\ntests/chirc/tests/test_connection.py:423: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x104bd06a0>\nclient = <chirc.client.ChircClient object at 0x104bd0400>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0030341148376464844, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users", "duration": 0.14506149291992188, "run_index": 25, "setup": {"name": "setup", "duration": 0.016611099243164062, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10900425910949707, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104c36a58>\nclient = <chirc.client.ChircClient object at 0x105815be0>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x105815be0>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestMultiuserConnection object at 0x104c36860>\nirc_session = <chirc.tests.common.IRCSession object at 0x104c36a58>\n\n    def test_connect_2users(self, irc_session):\n        \"\"\"\n            Connects two clients to the server.\n            \"\"\"\n    \n>       irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x104c36a58>\nclient = <chirc.client.ChircClient object at 0x105815be0>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0028350353240966797, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick", "duration": 0.14493680000305176, "run_index": 26, "setup": {"name": "setup", "duration": 0.016489028930664062, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10907578468322754, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104c2d940>\nclient = <chirc.client.ChircClient object at 0x104c2da20>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x104c2da20>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestMultiuserConnection object at 0x104c2d550>\nirc_session = <chirc.tests.common.IRCSession object at 0x104c2d940>\n\n    def test_connect_duplicate_nick(self, irc_session):\n        \"\"\"\n            Connects two clients to the server, but the second\n            client tries to use the first client's nickname\n            (and should get an ERR_NICKNAMEINUSE)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:446: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x104c2d940>\nclient = <chirc.client.ChircClient object at 0x104c2da20>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0028829574584960938, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration1", "duration": 0.14268016815185547, "run_index": 27, "setup": {"name": "setup", "duration": 0.016071081161499023, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10772204399108887, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104c4b5f8>\nclient = <chirc.client.ChircClient object at 0x104c4b7b8>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x104c4b7b8>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104c4bef0>\nirc_session = <chirc.tests.common.IRCSession object at 0x104c4b5f8>\n\n    def test_quit_after_registration1(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            Verifies the ERROR response, but not whether the server\n            actually disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:465: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x104c4b5f8>\nclient = <chirc.client.ChircClient object at 0x104c4b7b8>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0028159618377685547, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration2", "duration": 0.14394664764404297, "run_index": 28, "setup": {"name": "setup", "duration": 0.01617717742919922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.1087033748626709, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x1024ea208>\nclient = <chirc.client.ChircClient object at 0x104ffb1d0>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x104ffb1d0>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104ffbc50>\nirc_session = <chirc.tests.common.IRCSession object at 0x1024ea208>\n\n    def test_quit_after_registration2(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            Verifies the ERROR response and also checks whether the\n            server disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x1024ea208>\nclient = <chirc.client.ChircClient object at 0x104ffb1d0>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002888917922973633, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration3", "duration": 0.13921332359313965, "run_index": 29, "setup": {"name": "setup", "duration": 0.01526784896850586, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10563468933105469, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104fce320>\nclient = <chirc.client.ChircClient object at 0x104fce518>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x104fce518>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104fce0b8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104fce320>\n\n    def test_quit_after_registration3(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            QUIT does not specify a message, so the default \"Client Quit\" should\n            be assumed. Also verifies the ERROR response and also checks whether the\n            server disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x104fce320>\nclient = <chirc.client.ChircClient object at 0x104fce518>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.003042936325073242, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration4", "duration": 0.15001177787780762, "run_index": 30, "setup": {"name": "setup", "duration": 0.01867532730102539, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10878515243530273, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x104fe5748>\nclient = <chirc.client.ChircClient object at 0x105839320>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.client.ChircClient object at 0x105839320>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_connection.TestQUIT object at 0x104fe53c8>\nirc_session = <chirc.tests.common.IRCSession object at 0x104fe5748>\n\n    def test_quit_after_registration4(self, irc_session):\n        \"\"\"\n            Connects two clients, and then has them quit, each with separate\n            messages.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:512: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:444: in verify_welcome_messages\n    reply = self.get_reply(client, expect_code = replies.RPL_YOURHOST, expect_nick = nick, expect_nparams = 1)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <chirc.tests.common.IRCSession object at 0x104fe5748>\nclient = <chirc.client.ChircClient object at 0x105839320>, expect_code = '002'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = None, long_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but got none (no bytes received)\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0038759708404541016, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 22, "failed": 9, "num_tests": 31, "duration": 7.148261070251465}, "created_at": "2017-09-11 18:09:46.835191"}}