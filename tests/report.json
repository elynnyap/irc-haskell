{"report": {"environment": {"Python": "3.6.1", "Platform": "Darwin-16.5.0-x86_64-i386-64bit"}, "tests": [{"name": "tests/chirc/tests/test_channel.py::TestJOIN::()::test_join1", "duration": 0.3601672649383545, "run_index": 0, "setup": {"name": "setup", "duration": 0.017292022705078125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3231470584869385, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestJOIN object at 0x1045e0978>\nirc_session = <chirc.tests.common.IRCSession object at 0x1045fb048>\n\n    def test_join1(self, irc_session):\n        \"\"\"\n            A single user connects to the server and joins a channel\n            that does not already exist.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x104612128>, host = 'localhost'\nport = 39193, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_JOIN"}], "teardown": {"name": "teardown", "duration": 0.0024361610412597656, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestJOIN::()::test_join2", "duration": 0.3475611209869385, "run_index": 1, "setup": {"name": "setup", "duration": 0.017277956008911133, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3104581832885742, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestJOIN object at 0x10465ad68>\nirc_session = <chirc.tests.common.IRCSession object at 0x10465aef0>\n\n    def test_join2(self, irc_session):\n        \"\"\"\n            A single user connects to the server and joins a channel\n            that does not already exist. The user tries to join it again,\n            which results in no reply.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10465ada0>, host = 'localhost'\nport = 40212, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_JOIN"}], "teardown": {"name": "teardown", "duration": 0.002547025680541992, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestJOIN::()::test_join3", "duration": 0.35372185707092285, "run_index": 2, "setup": {"name": "setup", "duration": 0.017125844955444336, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31680822372436523, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestJOIN object at 0x10516c978>\nirc_session = <chirc.tests.common.IRCSession object at 0x10516cbe0>\n\n    def test_join3(self, irc_session):\n        \"\"\"\n            Five clients connect to the server and join the same channel\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(5)\n\ntests/chirc/tests/test_channel.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10516cdd8>, host = 'localhost'\nport = 19579, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_JOIN"}], "teardown": {"name": "teardown", "duration": 0.0026619434356689453, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestJOIN::()::test_join4", "duration": 0.3501772880554199, "run_index": 3, "setup": {"name": "setup", "duration": 0.016350984573364258, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3149702548980713, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestJOIN object at 0x10416b4e0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10461f9e8>\n\n    def test_join4(self, irc_session):\n        \"\"\"\n            Two clients connect to the server, one joins a channel\n            (that does not previously exist) first, and the other\n            one joins it after that.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10462c4a8>, host = 'localhost'\nport = 26551, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_JOIN"}], "teardown": {"name": "teardown", "duration": 0.002505064010620117, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestJOIN::()::test_join5", "duration": 0.3564934730529785, "run_index": 4, "setup": {"name": "setup", "duration": 0.017730236053466797, "outcome": "passed"}, "call": {"name": "call", "duration": 0.318493127822876, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestJOIN object at 0x1047d7be0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1024ea080>\n\n    def test_join5(self, irc_session):\n        \"\"\"\n            Five clients connect to the server and all join the same channel.\n            We verify that the JOINs are correctly relayed in the channel.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(5)\n\ntests/chirc/tests/test_channel.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1047d7e80>, host = 'localhost'\nport = 59217, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_JOIN"}], "teardown": {"name": "teardown", "duration": 0.0025398731231689453, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg1", "duration": 0.34922099113464355, "run_index": 5, "setup": {"name": "setup", "duration": 0.01706409454345703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3124420642852783, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x10465a710>\nirc_session = <chirc.tests.common.IRCSession object at 0x10465ac18>\n\n    def test_channel_privmsg1(self, irc_session):\n        \"\"\"\n            Two clients connect to the server, join the same channel,\n            and send a PRIVMSG to the channel.\n            \"\"\"\n>       self._test_join_and_privmsg(irc_session, 2)\n\ntests/chirc/tests/test_channel.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:101: in _test_join_and_privmsg\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10519f0b8>, host = 'localhost'\nport = 38469, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002650737762451172, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg2", "duration": 0.35147929191589355, "run_index": 6, "setup": {"name": "setup", "duration": 0.016719818115234375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.315518856048584, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x105244390>\nirc_session = <chirc.tests.common.IRCSession object at 0x10465ab00>\n\n    def test_channel_privmsg2(self, irc_session):\n        \"\"\"\n            Five clients connect to the server, join the same channel,\n            and send a PRIVMSG to the channel.\n            \"\"\"\n>       self._test_join_and_privmsg(irc_session, 5)\n\ntests/chirc/tests/test_channel.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:101: in _test_join_and_privmsg\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105055358>, host = 'localhost'\nport = 45593, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.0025207996368408203, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg3", "duration": 0.345595121383667, "run_index": 7, "setup": {"name": "setup", "duration": 0.01715993881225586, "outcome": "passed"}, "call": {"name": "call", "duration": 0.30794811248779297, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x10516ccf8>\nirc_session = <chirc.tests.common.IRCSession object at 0x10516c748>\n\n    def test_channel_privmsg3(self, irc_session):\n        \"\"\"\n            Twenty clients connect to the server, join the same channel,\n            and send a PRIVMSG to the channel.\n            \"\"\"\n>       self._test_join_and_privmsg(irc_session, 20)\n\ntests/chirc/tests/test_channel.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:101: in _test_join_and_privmsg\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10516c198>, host = 'localhost'\nport = 53366, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.0033271312713623047, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_nochannel", "duration": 0.34979915618896484, "run_index": 8, "setup": {"name": "setup", "duration": 0.016817092895507812, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31320691108703613, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x10516d278>\nirc_session = <chirc.tests.common.IRCSession object at 0x10516d390>\n\n    def test_channel_privmsg_nochannel(self, irc_session):\n        \"\"\"\n            A user connects to the server and sends a message to\n            a channel that doesn't exist\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10516d2e8>, host = 'localhost'\nport = 23387, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002958059310913086, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelPRIVMSG::()::test_channel_privmsg_notonchannel", "duration": 0.34650111198425293, "run_index": 9, "setup": {"name": "setup", "duration": 0.016384124755859375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3107950687408447, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x105004f98>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050046d8>\n\n    def test_channel_privmsg_notonchannel(self, irc_session):\n        \"\"\"\n            Two clients connect to the server. One joins #test, and the other\n            one tries to send a message to #test.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050752e8>, host = 'localhost'\nport = 25187, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002937793731689453, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelNOTICE::()::test_channel_notice_nochannel", "duration": 0.3518040180206299, "run_index": 10, "setup": {"name": "setup", "duration": 0.01740097999572754, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31384801864624023, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelNOTICE object at 0x10524df98>\nirc_session = <chirc.tests.common.IRCSession object at 0x10524d438>\n\n    def test_channel_notice_nochannel(self, irc_session):\n        \"\"\"\n            A client connects to the server and sends a NOTICE to a channel\n            that does not exist.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050150b8>, host = 'localhost'\nport = 43470, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.0031540393829345703, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part1", "duration": 0.35344886779785156, "run_index": 11, "setup": {"name": "setup", "duration": 0.017819881439208984, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3151211738586426, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x1047acd30>\nirc_session = <chirc.tests.common.IRCSession object at 0x1047ac400>\n\n    def test_channel_part1(self, irc_session):\n        \"\"\"\n            Two clients connect to the server and join #test. The first\n            user leaves #test. Both clients should get a relay of the PART\n            message.\n            \"\"\"\n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10462cba8>, host = 'localhost'\nport = 55335, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.0026879310607910156, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part2", "duration": 0.35007381439208984, "run_index": 12, "setup": {"name": "setup", "duration": 0.016767024993896484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.313917875289917, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x1050f5518>\nirc_session = <chirc.tests.common.IRCSession object at 0x10462c4a8>\n\n    def test_channel_part2(self, irc_session):\n        \"\"\"\n            Two clients connect to the server and join #test. The first\n            user leaves #test (with a custom message). Both clients should\n            get a relay of the PART message.\n            \"\"\"\n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1047accc0>, host = 'localhost'\nport = 35374, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.002621889114379883, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part3", "duration": 0.3454627990722656, "run_index": 13, "setup": {"name": "setup", "duration": 0.01466679573059082, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3137362003326416, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x10516cef0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051af908>\n\n    def test_channel_part3(self, irc_session):\n        \"\"\"\n            Two clients connect to the server and join #test.\n    \n            The first one sends a PRIVMSG to the channel. Then, the second one\n            leaves the channel. The first one sends another PRIVMSG to the channel.\n            The second one shouldn't receive anything.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1051af2b0>, host = 'localhost'\nport = 37290, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.002393007278442383, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part4", "duration": 0.3448824882507324, "run_index": 14, "setup": {"name": "setup", "duration": 0.015386104583740234, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31151413917541504, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x1052444a8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105055c88>\n\n    def test_channel_part4(self, irc_session):\n        \"\"\"\n            Two clients connect to the server, join a channel, and then leave it.\n            \"\"\"\n>       self._test_join_and_part(irc_session, 2)\n\ntests/chirc/tests/test_channel.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:192: in _test_join_and_part\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050c60f0>, host = 'localhost'\nport = 52266, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.002596139907836914, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part5", "duration": 0.3515045642852783, "run_index": 15, "setup": {"name": "setup", "duration": 0.017138957977294922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31476283073425293, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x1047bb358>\nirc_session = <chirc.tests.common.IRCSession object at 0x1047bbba8>\n\n    def test_channel_part5(self, irc_session):\n        \"\"\"\n            Five clients connect to the server, join a channel, and then leave it.\n            \"\"\"\n>       self._test_join_and_part(irc_session, 5)\n\ntests/chirc/tests/test_channel.py:275: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:192: in _test_join_and_part\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1047bb278>, host = 'localhost'\nport = 22012, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.002463817596435547, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part6", "duration": 0.34624385833740234, "run_index": 16, "setup": {"name": "setup", "duration": 0.01452326774597168, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3146240711212158, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x1052418d0>\nirc_session = <chirc.tests.common.IRCSession object at 0x105241a90>\n\n    def test_channel_part6(self, irc_session):\n        \"\"\"\n            Twenty clients connect to the server, join a channel, and then leave it.\n            \"\"\"\n>       self._test_join_and_part(irc_session, 20)\n\ntests/chirc/tests/test_channel.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:192: in _test_join_and_part\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105241fd0>, host = 'localhost'\nport = 31267, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.002573251724243164, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part7", "duration": 0.34820127487182617, "run_index": 17, "setup": {"name": "setup", "duration": 0.016498088836669922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3122670650482178, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x10524acf8>\nirc_session = <chirc.tests.common.IRCSession object at 0x10524ab70>\n\n    def test_channel_part7(self, irc_session):\n        \"\"\"\n            Two clients connect to the server, join a channel, then leave it,\n            then join it again, and leave it again.\n            \"\"\"\n>       self._test_join_and_part_and_join_and_part(irc_session, 2)\n\ntests/chirc/tests/test_channel.py:290: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:201: in _test_join_and_part_and_join_and_part\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10524a668>, host = 'localhost'\nport = 15670, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.0029380321502685547, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part8", "duration": 0.3483612537384033, "run_index": 18, "setup": {"name": "setup", "duration": 0.016185760498046875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31322288513183594, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x105075cf8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105075780>\n\n    def test_channel_part8(self, irc_session):\n        \"\"\"\n            Five clients connect to the server, join a channel, then leave it,\n            then join it again, and leave it again.\n            \"\"\"\n>       self._test_join_and_part_and_join_and_part(irc_session, 5)\n\ntests/chirc/tests/test_channel.py:298: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:201: in _test_join_and_part_and_join_and_part\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105075c50>, host = 'localhost'\nport = 34011, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.002766847610473633, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part9", "duration": 0.34925103187561035, "run_index": 19, "setup": {"name": "setup", "duration": 0.01707291603088379, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31246423721313477, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x1051a9d68>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050f9198>\n\n    def test_channel_part9(self, irc_session):\n        \"\"\"\n            Twenty clients connect to the server, join a channel, then leave it,\n            then join it again, and leave it again.\n            \"\"\"\n>       self._test_join_and_part_and_join_and_part(irc_session, 10)\n\ntests/chirc/tests/test_channel.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_channel.py:201: in _test_join_and_part_and_join_and_part\n    clients = irc_session.connect_clients(numclients, join_channel = \"#test\")\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050f9518>, host = 'localhost'\nport = 19260, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.002640962600708008, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel1", "duration": 0.3491520881652832, "run_index": 20, "setup": {"name": "setup", "duration": 0.017197132110595703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3117339611053467, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x1047aa6a0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1047aa470>\n\n    def test_channel_part_nochannel1(self, irc_session):\n        \"\"\"\n            A client connects to the server and tries to leave a channel\n            the user is not in (furthermore, the channel doesn't exist)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:315: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105210cc0>, host = 'localhost'\nport = 21745, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.003023862838745117, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_nochannel2", "duration": 0.35160326957702637, "run_index": 21, "setup": {"name": "setup", "duration": 0.017783641815185547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31330394744873047, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x105069ba8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105069e80>\n\n    def test_channel_part_nochannel2(self, irc_session):\n        \"\"\"\n            A client connects to the server, joins the #test channel\n            and leaves it. Then, the user tries to leave a channel\n            again.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(1, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:331: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105069198>, host = 'localhost'\nport = 35421, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.0027320384979248047, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel1", "duration": 0.34932994842529297, "run_index": 22, "setup": {"name": "setup", "duration": 0.017757892608642578, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31135106086730957, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x105207128>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052075f8>\n\n    def test_channel_part_notonchannel1(self, irc_session):\n        \"\"\"\n            Two clients connect to the server. The first one joins #test,\n            and the second one tries to leave #test (the second client\n            is not in the channel, but the channel exists)\n            \"\"\"\n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105207f28>, host = 'localhost'\nport = 35176, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.002463102340698242, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestPART::()::test_channel_part_notonchannel2", "duration": 0.3495979309082031, "run_index": 23, "setup": {"name": "setup", "duration": 0.015721797943115234, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31527233123779297, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestPART object at 0x1050c7d30>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050c7748>\n\n    def test_channel_part_notonchannel2(self, irc_session):\n        \"\"\"\n            Two clients connect to the server and both join #test.\n            The first one leaves the channel, and then tries to leave\n            again.\n            \"\"\"\n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050c70f0>, host = 'localhost'\nport = 46081, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_PART"}], "teardown": {"name": "teardown", "duration": 0.0028820037841796875, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic01", "duration": 0.3528127670288086, "run_index": 24, "setup": {"name": "setup", "duration": 0.017395973205566406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3154749870300293, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x1051cbcf8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052089b0>\n\n    def test_topic01(self, irc_session):\n        \"\"\"\n            A client connects to the server, joins #test and sets the channel topic\n            \"\"\"\n    \n        topic = \"This is the channel's topic\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:390: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105208898>, host = 'localhost'\nport = 44107, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.0025458335876464844, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic02", "duration": 0.34712648391723633, "run_index": 25, "setup": {"name": "setup", "duration": 0.015268802642822266, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3141160011291504, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x1050c6f60>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050c60f0>\n\n    def test_topic02(self, irc_session):\n        \"\"\"\n            A client connects to the server, joins #test, sets the channel topic,\n            and then asks for the topic.\n            \"\"\"\n    \n        topic = \"This is the channel's topic\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:409: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050c6438>, host = 'localhost'\nport = 25482, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.0024728775024414062, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic03", "duration": 0.34920334815979004, "run_index": 26, "setup": {"name": "setup", "duration": 0.015531063079833984, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31525707244873047, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x105048cf8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105048ef0>\n\n    def test_topic03(self, irc_session):\n        \"\"\"\n            A client connects to the server, joins #test and then asks for the topic\n            (but no topic has been set)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:432: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105048ac8>, host = 'localhost'\nport = 56494, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.0028841495513916016, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic04", "duration": 0.3518056869506836, "run_index": 27, "setup": {"name": "setup", "duration": 0.01761794090270996, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3136019706726074, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x1050698d0>\nirc_session = <chirc.tests.common.IRCSession object at 0x105069a58>\n\n    def test_topic04(self, irc_session):\n        \"\"\"\n            A client connects to the server and asks for the topic of a channel\n            that does not exists.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:451: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105069208>, host = 'localhost'\nport = 34869, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.00296783447265625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic05", "duration": 0.3475615978240967, "run_index": 28, "setup": {"name": "setup", "duration": 0.0162808895111084, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31223201751708984, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x1051d37b8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051d3f60>\n\n    def test_topic05(self, irc_session):\n        \"\"\"\n            A client connects to the server and tries to set the topic of a channel\n            that does not exists.\n            \"\"\"\n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:465: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1051d3e10>, host = 'localhost'\nport = 23249, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.002767801284790039, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic06", "duration": 0.3533344268798828, "run_index": 29, "setup": {"name": "setup", "duration": 0.01636481285095215, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3179600238800049, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x105178f28>\nirc_session = <chirc.tests.common.IRCSession object at 0x105178630>\n\n    def test_topic06(self, irc_session):\n        \"\"\"\n            Two clients connect to the server. The first one joins #test, the\n            second one does not. The second one tries to ask for the channel topic.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:480: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10516d668>, host = 'localhost'\nport = 55764, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.002644777297973633, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic07", "duration": 0.05703163146972656, "run_index": 30, "setup": {"name": "setup", "duration": 0.0159149169921875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.02258896827697754, "outcome": "failed", "longrepr": "self = <chirc.tests.common.IRCSession object at 0x10525ef60>\nclient = <chirc.client.ChircClient object at 0x10525e9b0>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n>           msg = client.get_message()\n\ntests/chirc/tests/common.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10525e9b0>\n\n    def get_message(self):\n        msg = self.client.read_until(str.encode(\"\\r\\n\"), timeout=self.msg_timeout)\n        msg = msg.decode()\n        if msg[-2:] != \"\\r\\n\":\n>           raise ReplyTimeoutException(msg)\nE           chirc.types.ReplyTimeoutException: OCSC\u001a\u0005\n\ntests/chirc/client.py:37: ReplyTimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <chirc.tests.test_channel.TestTOPIC object at 0x10525e8d0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10525ef60>\n\n    def test_topic07(self, irc_session):\n        \"\"\"\n            Two clients connect to the server. The first one joins #test and sets\n            the channel topic. The second one does not join the channel, but\n            tries to ask for the channel topic.\n            \"\"\"\n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:498: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:136: in connect_user\n    self.verify_welcome_messages(client, nick)\ntests/chirc/tests/common.py:441: in verify_welcome_messages\n    long_param_re= \"Welcome to the Internet Relay Network {}!{}.*\".format(nick, user))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.tests.common.IRCSession object at 0x10525ef60>\nclient = <chirc.client.ChircClient object at 0x10525e9b0>, expect_code = '001'\nexpect_nick = 'user1', expect_nparams = 1, expect_short_params = None\nlong_param_re = 'Welcome to the Internet Relay Network user1!user1.*'\nlong_param_values = None, expect_timeout = False\n\n    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,\n                  expect_short_params = None, long_param_re = None, long_param_values = None,\n                  expect_timeout = False):\n        try:\n            msg = client.get_message()\n    \n            if expect_timeout:\n                pytest.fail(\"Was not expecting a reply, but got one:\\n\" + msg.raw(bookends=True))\n        except EOFError:\n            pytest.fail(\"Server closed connection unexpectedly. Possible segfault in server?\")\n        except ReplyTimeoutException as rte:\n            if expect_timeout:\n                return None\n    \n            if len(rte.bytes_received) == 0:\n                failmsg = \"Expected a reply but got none (no bytes received)\"\n            else:\n                failmsg = \"Expected a reply but did not get valid reply terminated with \\\\r\\\\n. Bytes received:\\n|||{}|||\".format(rte.bytes_received)\n>           pytest.fail(failmsg)\nE           Failed: Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\nE           |||OCSC\u001a\u0005\r|||\n\ntests/chirc/tests/common.py:354: Failed"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.0026128292083740234, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic08", "duration": 0.3516824245452881, "run_index": 31, "setup": {"name": "setup", "duration": 0.01721024513244629, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3147399425506592, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x105266da0>\nirc_session = <chirc.tests.common.IRCSession object at 0x105208908>\n\n    def test_topic08(self, irc_session):\n        \"\"\"\n            Two clients connect to the server. The first one joins #test and sets\n            the channel topic. The second one joins after that, and should receive\n            the topic when joining.\n            \"\"\"\n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_channel.py:519: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1052081d0>, host = 'localhost'\nport = 47051, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.002521991729736328, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic09", "duration": 0.3534879684448242, "run_index": 32, "setup": {"name": "setup", "duration": 0.01715087890625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31644320487976074, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x10500a278>\nirc_session = <chirc.tests.common.IRCSession object at 0x10500a588>\n\n    def test_topic09(self, irc_session):\n        \"\"\"\n            Ten clients connect to the server and join #test. The first\n            user changes the topic of the channel. Everyone should\n            receive the relay of the topic.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(10, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:539: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10500a1d0>, host = 'localhost'\nport = 13997, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.0027430057525634766, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestTOPIC::()::test_topic10", "duration": 0.3494412899017334, "run_index": 33, "setup": {"name": "setup", "duration": 0.01798725128173828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3107609748840332, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestTOPIC object at 0x1053904a8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051d9208>\n\n    def test_topic10(self, irc_session):\n        \"\"\"\n            Ten clients connect to the server. The first one joins #test\n            and sets the channel topic. The remaining nine then join\n            the channel, and should all receive the topic when joining\n            \"\"\"\n>       clients = irc_session.connect_clients(10)\n\ntests/chirc/tests/test_channel.py:556: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10506b2e8>, host = 'localhost'\nport = 23511, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CHANNEL_TOPIC"}], "teardown": {"name": "teardown", "duration": 0.002705812454223633, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names1", "duration": 0.3487551212310791, "run_index": 34, "setup": {"name": "setup", "duration": 0.017184972763061523, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3116300106048584, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x1047bfc88>\nirc_session = <chirc.tests.common.IRCSession object at 0x1047bf7b8>\n\n    def test_names1(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            This test verifies that the correct RPL_NAMREPLY and RPL_ENDOFNAMES\n            replies are sent when each of the users joins a channel.\n            \"\"\"\n>       irc_session.connect_and_join_channels(channels1, test_names = True)\n\ntests/chirc/tests/test_channel.py:634: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1047bf4a8>, host = 'localhost'\nport = 36964, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.0027551651000976562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names2", "duration": 0.3466031551361084, "run_index": 35, "setup": {"name": "setup", "duration": 0.015536069869995117, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31234312057495117, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x1051886a0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051882e8>\n\n    def test_names2(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            Not in a channel: user10, user11\n    \n            This test verifies that the correct RPL_NAMREPLY and RPL_ENDOFNAMES\n            replies are sent when each of the users joins a channel.\n            \"\"\"\n>       irc_session.connect_and_join_channels(channels2, test_names = True)\n\ntests/chirc/tests/test_channel.py:652: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105188fd0>, host = 'localhost'\nport = 50002, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.003187894821166992, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names3", "duration": 0.3511838912963867, "run_index": 36, "setup": {"name": "setup", "duration": 0.01611804962158203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31635403633117676, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x1050e42b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050e4898>\n\n    def test_names3(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n    \n            This test verifies that the correct RPL_NAMREPLY and RPL_ENDOFNAMES\n            replies are sent when each of the users joins a channel.\n            \"\"\"\n>       irc_session.connect_and_join_channels(channels3, test_names = True)\n\ntests/chirc/tests/test_channel.py:672: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050e4be0>, host = 'localhost'\nport = 34463, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.0025937557220458984, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names4", "duration": 0.3450331687927246, "run_index": 37, "setup": {"name": "setup", "duration": 0.01503896713256836, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3123950958251953, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x10516db00>\nirc_session = <chirc.tests.common.IRCSession object at 0x10516d128>\n\n    def test_names4(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            This test send a NAMES command for each of the channels and verifies\n            the replies.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels1, test_names = True)\n\ntests/chirc/tests/test_channel.py:689: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10516d828>, host = 'localhost'\nport = 43536, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.002560138702392578, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names5", "duration": 0.3464334011077881, "run_index": 38, "setup": {"name": "setup", "duration": 0.014737844467163086, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31445980072021484, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x1050d4208>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050d42b0>\n\n    def test_names5(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            Not in a channel: user10, user11\n    \n            This test send a NAMES command for each of the channels and verifies\n            the replies.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels2, test_names = True)\n\ntests/chirc/tests/test_channel.py:709: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050d4b38>, host = 'localhost'\nport = 32928, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.0024979114532470703, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names6", "duration": 0.35386228561401367, "run_index": 39, "setup": {"name": "setup", "duration": 0.017196178436279297, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31690502166748047, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x1051becf8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051be9b0>\n\n    def test_names6(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n    \n            This test send a NAMES command for each of the channels and verifies\n            the replies.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels3, test_names = True)\n\ntests/chirc/tests/test_channel.py:731: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1051be5c0>, host = 'localhost'\nport = 44428, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.0025649070739746094, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names7", "duration": 0.3535318374633789, "run_index": 40, "setup": {"name": "setup", "duration": 0.017204761505126953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31661224365234375, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x10501f128>\nirc_session = <chirc.tests.common.IRCSession object at 0x10501f940>\n\n    def test_names7(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            This test send a NAMES command without a parameter and verifies\n            the replies.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels1, test_names = True)\n\ntests/chirc/tests/test_channel.py:750: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10501f5c0>, host = 'localhost'\nport = 34709, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.00251007080078125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names8", "duration": 0.34662675857543945, "run_index": 41, "setup": {"name": "setup", "duration": 0.015826940536499023, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3123619556427002, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x105232390>\nirc_session = <chirc.tests.common.IRCSession object at 0x105232f60>\n\n    def test_names8(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            Not in a channel: user10, user11\n    \n            This test send a NAMES command without a parameter and verifies\n            the replies.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels2, test_names = True)\n\ntests/chirc/tests/test_channel.py:770: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105232128>, host = 'localhost'\nport = 22366, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.002610921859741211, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names9", "duration": 0.3504621982574463, "run_index": 42, "setup": {"name": "setup", "duration": 0.016849040985107422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3141968250274658, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x10527b2b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10527b1d0>\n\n    def test_names9(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n    \n            This test send a NAMES command without a parameter and verifies\n            the replies.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels3, test_names = True)\n\ntests/chirc/tests/test_channel.py:792: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10527bbe0>, host = 'localhost'\nport = 31074, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.002567291259765625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names10", "duration": 0.3456864356994629, "run_index": 43, "setup": {"name": "setup", "duration": 0.014938831329345703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31322383880615234, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x105151f28>\nirc_session = <chirc.tests.common.IRCSession object at 0x105390f98>\n\n    def test_names10(self, irc_session):\n        \"\"\"\n            Connects five users to the server, with none of them joining any channels.\n    \n            This test send a NAMES command without a parameter and verifies\n            the replies.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels4, test_names = True)\n\ntests/chirc/tests/test_channel.py:804: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105343e80>, host = 'localhost'\nport = 43621, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.0025849342346191406, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestNAMES::()::test_names11", "duration": 0.353212833404541, "run_index": 44, "setup": {"name": "setup", "duration": 0.016077041625976562, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3185286521911621, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestNAMES object at 0x105326ba8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105326198>\n\n    def test_names11(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            user1 then sends a NAMES command for a channel that does not\n            exist\n            \"\"\"\n    \n>       users = irc_session.connect_and_join_channels(channels1, test_names = True)\n\ntests/chirc/tests/test_channel.py:824: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105326550>, host = 'localhost'\nport = 24834, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "NAMES"}], "teardown": {"name": "teardown", "duration": 0.0025300979614257812, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestLIST::()::test_list1", "duration": 0.3496890068054199, "run_index": 45, "setup": {"name": "setup", "duration": 0.016698122024536133, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3134908676147461, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestLIST object at 0x105343400>\nirc_session = <chirc.tests.common.IRCSession object at 0x105343828>\n\n    def test_list1(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            user1 then sends a LIST command.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels1)\n\ntests/chirc/tests/test_channel.py:889: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105343240>, host = 'localhost'\nport = 19444, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LIST"}], "teardown": {"name": "teardown", "duration": 0.0028018951416015625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestLIST::()::test_list2", "duration": 0.34838342666625977, "run_index": 46, "setup": {"name": "setup", "duration": 0.015710115432739258, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3142080307006836, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestLIST object at 0x105225400>\nirc_session = <chirc.tests.common.IRCSession object at 0x105225b38>\n\n    def test_list2(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            Not in a channel: user10, user11\n    \n            user1 then sends a LIST command.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels2)\n\ntests/chirc/tests/test_channel.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105225e48>, host = 'localhost'\nport = 40423, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LIST"}], "teardown": {"name": "teardown", "duration": 0.0027551651000976562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestLIST::()::test_list3", "duration": 0.4371321201324463, "run_index": 47, "setup": {"name": "setup", "duration": 0.06083488464355469, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31290125846862793, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestLIST object at 0x105403630>\nirc_session = <chirc.tests.common.IRCSession object at 0x105403860>\n\n    def test_list3(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n    \n            user1 then sends a LIST command.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels3)\n\ntests/chirc/tests/test_channel.py:929: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1054450f0>, host = 'localhost'\nport = 12393, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LIST"}], "teardown": {"name": "teardown", "duration": 0.0025610923767089844, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestLIST::()::test_list4", "duration": 0.34791111946105957, "run_index": 48, "setup": {"name": "setup", "duration": 0.016004085540771484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3133277893066406, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestLIST object at 0x1053eba90>\nirc_session = <chirc.tests.common.IRCSession object at 0x1053eb908>\n\n    def test_list4(self, irc_session):\n        \"\"\"\n            Connects five users to the server, with none of them joining any channels.\n    \n            user1 then sends a LIST command.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels4)\n\ntests/chirc/tests/test_channel.py:940: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053ebcf8>, host = 'localhost'\nport = 54956, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LIST"}], "teardown": {"name": "teardown", "duration": 0.0025751590728759766, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestLIST::()::test_list5", "duration": 0.3482482433319092, "run_index": 49, "setup": {"name": "setup", "duration": 0.01645517349243164, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3126840591430664, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestLIST object at 0x1053fe908>\nirc_session = <chirc.tests.common.IRCSession object at 0x1053fe0f0>\n\n    def test_list5(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            Not in a channel: user10, user11\n    \n            The operator in each channel then sets the topic for the\n            channel. user10 sends a LIST command, and the replies\n            should include the topics of the channels.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels2)\n\ntests/chirc/tests/test_channel.py:962: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053fe320>, host = 'localhost'\nport = 44350, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LIST"}], "teardown": {"name": "teardown", "duration": 0.002653837203979492, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestWHO::()::test_who1", "duration": 0.35205578804016113, "run_index": 50, "setup": {"name": "setup", "duration": 0.01708698272705078, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3152298927307129, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestWHO object at 0x1053cc9b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1053cca90>\n\n    def test_who1(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            user1 then sends a WHO for each channel.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels1)\n\ntests/chirc/tests/test_channel.py:1097: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053fda20>, host = 'localhost'\nport = 37595, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "WHO"}], "teardown": {"name": "teardown", "duration": 0.0026519298553466797, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestWHO::()::test_who2", "duration": 0.3495466709136963, "run_index": 51, "setup": {"name": "setup", "duration": 0.017448902130126953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31200289726257324, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestWHO object at 0x10526f4e0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10526f940>\n\n    def test_who2(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            user1, user4, and user7 each send a \"WHO *\" command.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels1)\n\ntests/chirc/tests/test_channel.py:1116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10526f2b0>, host = 'localhost'\nport = 55193, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "WHO"}], "teardown": {"name": "teardown", "duration": 0.0026459693908691406, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestWHO::()::test_who3", "duration": 0.34174633026123047, "run_index": 52, "setup": {"name": "setup", "duration": 0.015072107315063477, "outcome": "passed"}, "call": {"name": "call", "duration": 0.30906009674072266, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestWHO object at 0x105416e10>\nirc_session = <chirc.tests.common.IRCSession object at 0x105416fd0>\n\n    def test_who3(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            Not in a channel: user10, user11\n    \n            user1, user4, user7, and user10 each send a \"WHO *\" command.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels2)\n\ntests/chirc/tests/test_channel.py:1137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105416a90>, host = 'localhost'\nport = 22187, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "WHO"}], "teardown": {"name": "teardown", "duration": 0.0025420188903808594, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestWHO::()::test_who4", "duration": 0.34113216400146484, "run_index": 53, "setup": {"name": "setup", "duration": 0.014697074890136719, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3092198371887207, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestWHO object at 0x105402358>\nirc_session = <chirc.tests.common.IRCSession object at 0x105402710>\n\n    def test_who4(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n    \n            user1 then sends a WHO for each channel.\n            \"\"\"\n>       users = irc_session.connect_and_join_channels(channels3)\n\ntests/chirc/tests/test_channel.py:1161: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1054025f8>, host = 'localhost'\nport = 40619, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "WHO"}], "teardown": {"name": "teardown", "duration": 0.002518177032470703, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestWHO::()::test_who5", "duration": 0.3489990234375, "run_index": 54, "setup": {"name": "setup", "duration": 0.01456594467163086, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31729698181152344, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestWHO object at 0x105419ba8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105419d30>\n\n    def test_who5(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            user4, user5, and user7 mark themselves as away. user4 and user6 become\n            IRCops. user1 then sends a WHO for each channel.\n            \"\"\"\n        aways = [\"user4\", \"user5\", \"user7\"]\n        ircops = [\"user4\", \"user6\"]\n    \n>       users = irc_session.connect_and_join_channels(channels1, aways, ircops)\n\ntests/chirc/tests/test_channel.py:1187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105419240>, host = 'localhost'\nport = 50775, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "WHO"}], "teardown": {"name": "teardown", "duration": 0.0025701522827148438, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestWHO::()::test_who6", "duration": 0.3452310562133789, "run_index": 55, "setup": {"name": "setup", "duration": 0.015186071395874023, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31210994720458984, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestWHO object at 0x105419780>\nirc_session = <chirc.tests.common.IRCSession object at 0x1047bf630>\n\n    def test_who6(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n    \n            user4, user8, and user10 mark themselves as away. user8, user9, user10,\n            and user11 become IRCops. user1 then sends a WHO for each channel.\n            \"\"\"\n        aways = [\"user4\", \"user8\", \"user10\"]\n        ircops = [\"user8\", \"user9\", \"user10\", \"user11\"]\n    \n>       users = irc_session.connect_and_join_channels(channels3, aways, ircops)\n\ntests/chirc/tests/test_channel.py:1215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053e1860>, host = 'localhost'\nport = 48491, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "WHO"}], "teardown": {"name": "teardown", "duration": 0.0027489662170410156, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelUPDATEAssignment2::()::test_update1b_nick", "duration": 0.34929323196411133, "run_index": 56, "setup": {"name": "setup", "duration": 0.017179012298583984, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3124070167541504, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelUPDATEAssignment2 object at 0x10539be80>\nirc_session = <chirc.tests.common.IRCSession object at 0x10539b358>\n\n    def test_update1b_nick(self, irc_session):\n        \"\"\"\n            Ensure that nick changes are relayed in a channel.\n            \"\"\"\n>       clients = irc_session.connect_clients(5, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:1231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10539b4e0>, host = 'localhost'\nport = 33011, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.0025281906127929688, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelUPDATEAssignment2::()::test_update1b_quit1", "duration": 0.35146450996398926, "run_index": 57, "setup": {"name": "setup", "duration": 0.0176849365234375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31343984603881836, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelUPDATEAssignment2 object at 0x1054607f0>\nirc_session = <chirc.tests.common.IRCSession object at 0x105460e48>\n\n    def test_update1b_quit1(self, irc_session):\n        \"\"\"\n            Ensure that a user's QUIT is relayed to the channels the user is in.\n            \"\"\"\n>       clients = irc_session.connect_clients(5, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:1245: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105460c18>, host = 'localhost'\nport = 56734, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.0026547908782958984, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_channel.py::TestChannelUPDATEAssignment2::()::test_update1b_quit2", "duration": 0.34769105911254883, "run_index": 58, "setup": {"name": "setup", "duration": 0.01536107063293457, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3137791156768799, "outcome": "failed", "longrepr": "self = <chirc.tests.test_channel.TestChannelUPDATEAssignment2 object at 0x1051e7048>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051e7b38>\n\n    def test_update1b_quit2(self, irc_session):\n        \"\"\"\n            Ensure that a user's QUIT (with a custom message) is relayed to the\n            channels the user is in.\n            \"\"\"\n>       clients = irc_session.connect_clients(5, join_channel = \"#test\")\n\ntests/chirc/tests/test_channel.py:1265: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10545f7b8>, host = 'localhost'\nport = 44149, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.0031898021697998047, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple1", "duration": 0.35166430473327637, "run_index": 59, "setup": {"name": "setup", "duration": 0.016257762908935547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31656980514526367, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x105472c50>\nirc_session = <chirc.tests.common.IRCSession object at 0x105472e80>\n\n    def test_connect_simple1(self, irc_session):\n        \"\"\"\n            Sends a NICK command followed by a USER command, and expects\n            to receive, at least, a RPL_WELCOME reply.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105472c18>, host = 'localhost'\nport = 20342, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0025789737701416016, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_simple2", "duration": 0.3516042232513428, "run_index": 60, "setup": {"name": "setup", "duration": 0.01662898063659668, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3157460689544678, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x10524a160>\nirc_session = <chirc.tests.common.IRCSession object at 0x10504bac8>\n\n    def test_connect_simple2(self, irc_session):\n        \"\"\"\n            Sends a USER command followed by a NICK command, and expects\n            to receive, at least, a RPL_WELCOME reply.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10504b940>, host = 'localhost'\nport = 39497, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0026001930236816406, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_both_messages_at_once", "duration": 0.35380005836486816, "run_index": 61, "setup": {"name": "setup", "duration": 0.01757502555847168, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3161580562591553, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x105257160>\nirc_session = <chirc.tests.common.IRCSession object at 0x10516d2e8>\n\n    def test_connect_both_messages_at_once(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command in the same TCP packet. This tests that\n            the server doesn't (incorrectly) assume that calling recv() will always\n            return a single message.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10516d710>, host = 'localhost'\nport = 22906, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0024919509887695312, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages1", "duration": 0.3505704402923584, "run_index": 62, "setup": {"name": "setup", "duration": 0.017143726348876953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31344103813171387, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x1051dc828>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051dccc0>\n\n    def test_connect_partitioned_messages1(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1051dce80>, host = 'localhost'\nport = 42417, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002841949462890625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages2", "duration": 0.3554220199584961, "run_index": 63, "setup": {"name": "setup", "duration": 0.017982959747314453, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3167591094970703, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x105352b70>\nirc_session = <chirc.tests.common.IRCSession object at 0x105159668>\n\n    def test_connect_partitioned_messages2(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10536ecc0>, host = 'localhost'\nport = 48299, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002696990966796875, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages3", "duration": 0.3516263961791992, "run_index": 64, "setup": {"name": "setup", "duration": 0.016675233840942383, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3156418800354004, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x105446c88>\nirc_session = <chirc.tests.common.IRCSession object at 0x105446f98>\n\n    def test_connect_partitioned_messages3(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105446390>, host = 'localhost'\nport = 32308, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0026340484619140625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages4", "duration": 0.34624767303466797, "run_index": 65, "setup": {"name": "setup", "duration": 0.01479029655456543, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3139028549194336, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x1052b32b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052b3128>\n\n    def test_connect_partitioned_messages4(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1052b3320>, host = 'localhost'\nport = 11709, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0027642250061035156, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages5", "duration": 0.34869956970214844, "run_index": 66, "setup": {"name": "setup", "duration": 0.01695394515991211, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3120238780975342, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x1043e9908>\nirc_session = <chirc.tests.common.IRCSession object at 0x1053cc320>\n\n    def test_connect_partitioned_messages5(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053ccb38>, host = 'localhost'\nport = 22494, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002767801284790039, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages6", "duration": 0.3542029857635498, "run_index": 67, "setup": {"name": "setup", "duration": 0.016761064529418945, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31810879707336426, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x105338940>\nirc_session = <chirc.tests.common.IRCSession object at 0x105338b38>\n\n    def test_connect_partitioned_messages6(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053389b0>, host = 'localhost'\nport = 12699, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0025720596313476562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_partitioned_messages7", "duration": 0.3491027355194092, "run_index": 68, "setup": {"name": "setup", "duration": 0.016499996185302734, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31342267990112305, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x1050f9358>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050f9208>\n\n    def test_connect_partitioned_messages7(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but partitioned at a point other than\n            at the \\r\\n terminator.\n    \n            Note: TCP will sometimes do whatever TCP wants, which means this message\n            could get partitioned in other ways.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050f9320>, host = 'localhost'\nport = 19144, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002680063247680664, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing1", "duration": 0.3462989330291748, "run_index": 69, "setup": {"name": "setup", "duration": 0.015010595321655273, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31372594833374023, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x105382390>\nirc_session = <chirc.tests.common.IRCSession object at 0x105382710>\n\n    def test_connect_nick_user_parsing1(self, irc_session):\n        \"\"\"\n            Tests that the server is actually parsing the NICK and USER parameters\n            (as opposed to just hardcoding \"nick1\" and \"user1\" which is used in\n            other tests.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:193: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105382fd0>, host = 'localhost'\nport = 58579, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0025517940521240234, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing2", "duration": 0.34864020347595215, "run_index": 70, "setup": {"name": "setup", "duration": 0.01528310775756836, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31556010246276855, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x1053dfb70>\nirc_session = <chirc.tests.common.IRCSession object at 0x1053df8d0>\n\n    def test_connect_nick_user_parsing2(self, irc_session):\n        \"\"\"\n            Tests that the server is actually parsing the NICK and USER parameters\n            (as opposed to just hardcoding \"nick1\" and \"user1\" which is used in\n            other tests. Additionally, partitions the messages.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:209: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053df1d0>, host = 'localhost'\nport = 57315, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002513885498046875, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing3", "duration": 0.3445861339569092, "run_index": 71, "setup": {"name": "setup", "duration": 0.015295028686523438, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3109769821166992, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x10547d9e8>\nirc_session = <chirc.tests.common.IRCSession object at 0x10547d4a8>\n\n    def test_connect_nick_user_parsing3(self, irc_session):\n        \"\"\"\n            Tests that the server is actually parsing the NICK and USER parameters\n            (as opposed to just hardcoding \"nick1\" and \"user1\" which is used in\n            other tests. Additionally, partitions the messages.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105069048>, host = 'localhost'\nport = 31107, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003019094467163086, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing4", "duration": 0.34710025787353516, "run_index": 72, "setup": {"name": "setup", "duration": 0.016329050064086914, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3119010925292969, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x10544f748>\nirc_session = <chirc.tests.common.IRCSession object at 0x10544f4e0>\n\n    def test_connect_nick_user_parsing4(self, irc_session):\n        \"\"\"\n            Tests that the server only uses the last NICK message sent during\n            the registration phase.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10544ffd0>, host = 'localhost'\nport = 13124, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002541065216064453, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_nick_user_parsing5", "duration": 0.34992265701293945, "run_index": 73, "setup": {"name": "setup", "duration": 0.015946149826049805, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3155641555786133, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x105363518>\nirc_session = <chirc.tests.common.IRCSession object at 0x105363f28>\n\n    def test_connect_nick_user_parsing5(self, irc_session):\n        \"\"\"\n            Tests that the server only uses the last USER message sent during\n            the registration phase.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105363630>, host = 'localhost'\nport = 47898, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0024662017822265625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome1", "duration": 0.3527412414550781, "run_index": 74, "setup": {"name": "setup", "duration": 0.017786741256713867, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3145318031311035, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x10500ada0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10500a390>\n\n    def test_connect_no_unexpected_welcome1(self, irc_session):\n        \"\"\"\n            Tests that the RPL_WELCOME message isn't just being sent immediately\n            after receiving a NICK command (without also receiving a USER command)\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10500a320>, host = 'localhost'\nport = 49968, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002635955810546875, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome2", "duration": 0.3504667282104492, "run_index": 75, "setup": {"name": "setup", "duration": 0.01771998405456543, "outcome": "passed"}, "call": {"name": "call", "duration": 0.312396764755249, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x10528dc50>\nirc_session = <chirc.tests.common.IRCSession object at 0x10528dcf8>\n\n    def test_connect_no_unexpected_welcome2(self, irc_session):\n        \"\"\"\n            Tests that the RPL_WELCOME message isn't just being sent immediately\n            after receiving a USER command (without also receiving a NICK command)\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10528d080>, host = 'localhost'\nport = 48422, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.002629995346069336, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome3", "duration": 0.34820032119750977, "run_index": 76, "setup": {"name": "setup", "duration": 0.015746116638183594, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3140583038330078, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x10536ec18>\nirc_session = <chirc.tests.common.IRCSession object at 0x105479630>\n\n    def test_connect_no_unexpected_welcome3(self, irc_session):\n        \"\"\"\n            Sends a NICK and USER command, but the USER command does not\n            have a \\r\\n at the end. No RPL_WELCOME should be sent.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1054792b0>, host = 'localhost'\nport = 51747, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0026497840881347656, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome4", "duration": 0.346235990524292, "run_index": 77, "setup": {"name": "setup", "duration": 0.015609979629516602, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31232523918151855, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x1050970b8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050972b0>\n\n    def test_connect_no_unexpected_welcome4(self, irc_session):\n        \"\"\"\n            Sends two USER commands, but no NICK, so no RPL_WELCOME should be sent.\n            (tests that the server isn't just unconditionally sending the welcome\n            messages after receiving two messages)\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105097160>, host = 'localhost'\nport = 32096, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0026907920837402344, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome5", "duration": 0.34684038162231445, "run_index": 78, "setup": {"name": "setup", "duration": 0.01598525047302246, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31193995475769043, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x10528d5f8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050f9e80>\n\n    def test_connect_no_unexpected_welcome5(self, irc_session):\n        \"\"\"\n            Sends two NICK commands, but no USER, so no RPL_WELCOME should be sent.\n            (tests that the server isn't just unconditionally sending the welcome\n            messages after receiving two messages)\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050f9c18>, host = 'localhost'\nport = 15606, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0029299259185791016, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome6", "duration": 0.3525261878967285, "run_index": 79, "setup": {"name": "setup", "duration": 0.016648054122924805, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3163318634033203, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x10547c5c0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10547cf28>\n\n    def test_connect_no_unexpected_welcome6(self, irc_session):\n        \"\"\"\n            Sends multiple USER commands, but no NICK. No RPL_WELCOME should be sent.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:355: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10547cf60>, host = 'localhost'\nport = 52896, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.0028982162475585938, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestBasicConnection::()::test_connect_no_unexpected_welcome7", "duration": 0.34618568420410156, "run_index": 80, "setup": {"name": "setup", "duration": 0.016276121139526367, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31062865257263184, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestBasicConnection object at 0x1052cfc88>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052cf470>\n\n    def test_connect_no_unexpected_welcome7(self, irc_session):\n        \"\"\"\n            Sends multiple NICK commands, but no USER. No RPL_WELCOME should be sent.\n            \"\"\"\n    \n>       client = irc_session.get_client(nodelay = True)\n\ntests/chirc/tests/test_connection.py:371: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1052cf550>, host = 'localhost'\nport = 23898, msg_timeout = 0.1, nodelay = True\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "BASIC_CONNECTION"}], "teardown": {"name": "teardown", "duration": 0.003004789352416992, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full1", "duration": 0.3496968746185303, "run_index": 81, "setup": {"name": "setup", "duration": 0.016794919967651367, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31333398818969727, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestFullConnection object at 0x10533ae10>\nirc_session = <chirc.tests.common.IRCSession object at 0x10533a898>\n\n    def test_connect_full1(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages are sent after the NICK and USER\n            commands are received.\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_connection.py:392: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10528d4a8>, host = 'localhost'\nport = 43346, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0027730464935302734, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full2", "duration": 0.3514235019683838, "run_index": 82, "setup": {"name": "setup", "duration": 0.017774105072021484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31293630599975586, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestFullConnection object at 0x1053fe748>\nirc_session = <chirc.tests.common.IRCSession object at 0x1053fe128>\n\n    def test_connect_full2(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages are sent after the USER and NICK\n            commands are received.\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_connection.py:405: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053fef98>, host = 'localhost'\nport = 27916, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002938985824584961, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestFullConnection::()::test_connect_full3", "duration": 0.3517873287200928, "run_index": 83, "setup": {"name": "setup", "duration": 0.017519235610961914, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31400489807128906, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestFullConnection object at 0x105098780>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050b8240>\n\n    def test_connect_full3(self, irc_session):\n        \"\"\"\n            Checks that all welcome messages, as well as the LUSERS and\n            MOTD replies, are sent after the NICK and USER commands are received.\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_connection.py:418: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050b8470>, host = 'localhost'\nport = 36031, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002743959426879883, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_2users", "duration": 0.3477590084075928, "run_index": 84, "setup": {"name": "setup", "duration": 0.015259981155395508, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31473493576049805, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestMultiuserConnection object at 0x1050b4518>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050b42e8>\n\n    def test_connect_2users(self, irc_session):\n        \"\"\"\n            Connects two clients to the server.\n            \"\"\"\n    \n>       irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050b4dd8>, host = 'localhost'\nport = 35806, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002504110336303711, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestMultiuserConnection::()::test_connect_duplicate_nick", "duration": 0.3484361171722412, "run_index": 85, "setup": {"name": "setup", "duration": 0.01564502716064453, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3144409656524658, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestMultiuserConnection object at 0x1052dc240>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052dcb38>\n\n    def test_connect_duplicate_nick(self, irc_session):\n        \"\"\"\n            Connects two clients to the server, but the second\n            client tries to use the first client's nickname\n            (and should get an ERR_NICKNAMEINUSE)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:446: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1052dcf28>, host = 'localhost'\nport = 11044, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.002705097198486328, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration1", "duration": 0.350996732711792, "run_index": 86, "setup": {"name": "setup", "duration": 0.016725778579711914, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31421995162963867, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestQUIT object at 0x1052c9320>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052c9438>\n\n    def test_quit_after_registration1(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            Verifies the ERROR response, but not whether the server\n            actually disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:465: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1052c9390>, host = 'localhost'\nport = 47172, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.003325223922729492, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration2", "duration": 0.35305190086364746, "run_index": 87, "setup": {"name": "setup", "duration": 0.01756596565246582, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31502699851989746, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestQUIT object at 0x10536b9b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10536b3c8>\n\n    def test_quit_after_registration2(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            Verifies the ERROR response and also checks whether the\n            server disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:479: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1051b5eb8>, host = 'localhost'\nport = 45478, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0028929710388183594, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration3", "duration": 0.3451259136199951, "run_index": 88, "setup": {"name": "setup", "duration": 0.01614999771118164, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31022191047668457, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestQUIT object at 0x1052ec4e0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052ec080>\n\n    def test_quit_after_registration3(self, irc_session):\n        \"\"\"\n            Connects a client, and quits right after connecting.\n            QUIT does not specify a message, so the default \"Client Quit\" should\n            be assumed. Also verifies the ERROR response and also checks whether the\n            server disconnected the client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:496: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1052ec3c8>, host = 'localhost'\nport = 57528, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0026040077209472656, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_connection.py::TestQUIT::()::test_quit_after_registration4", "duration": 0.34894585609436035, "run_index": 89, "setup": {"name": "setup", "duration": 0.016982078552246094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31242990493774414, "outcome": "failed", "longrepr": "self = <chirc.tests.test_connection.TestQUIT object at 0x10549c6a0>\nirc_session = <chirc.tests.common.IRCSession object at 0x105098b38>\n\n    def test_quit_after_registration4(self, irc_session):\n        \"\"\"\n            Connects two clients, and then has them quit, each with separate\n            messages.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_connection.py:512: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105098ba8>, host = 'localhost'\nport = 37506, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "CONNECTION_REGISTRATION"}], "teardown": {"name": "teardown", "duration": 0.0025517940521240234, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd1", "duration": 0.3541545867919922, "run_index": 90, "setup": {"name": "setup", "duration": 0.01763916015625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31627511978149414, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestConnectionWithLUSERSMOTD object at 0x10549de10>\nirc_session = <chirc.tests.common.IRCSession object at 0x10549d860>\n\n    def test_connect_lusers_motd1(self, irc_session):\n        \"\"\"\n            Test correct values in LUSERS with one client connected\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_lusers_motd.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10549d320>, host = 'localhost'\nport = 26896, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LUSERS"}], "teardown": {"name": "teardown", "duration": 0.002601146697998047, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd2", "duration": 0.3521454334259033, "run_index": 91, "setup": {"name": "setup", "duration": 0.017660140991210938, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3132638931274414, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestConnectionWithLUSERSMOTD object at 0x1054beef0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1054be0b8>\n\n    def test_connect_lusers_motd2(self, irc_session):\n        \"\"\"\n            Test correct values in LUSERS with one client connected\n            (connecting by sending USER first instead of NICK)\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_lusers_motd.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1054bec50>, host = 'localhost'\nport = 52737, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LUSERS"}], "teardown": {"name": "teardown", "duration": 0.003561258316040039, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_2users", "duration": 0.34670090675354004, "run_index": 92, "setup": {"name": "setup", "duration": 0.015105009078979492, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3138430118560791, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestConnectionWithLUSERSMOTD object at 0x10545f7b8>\nirc_session = <chirc.tests.common.IRCSession object at 0x10545f2e8>\n\n    def test_connect_lusers_motd_2users(self, irc_session):\n        \"\"\"\n            Test correct values in LUSERS with two clients connected\n            \"\"\"\n    \n>       client1 = irc_session.get_client()\n\ntests/chirc/tests/test_lusers_motd.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10545f5f8>, host = 'localhost'\nport = 10507, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LUSERS"}], "teardown": {"name": "teardown", "duration": 0.002647876739501953, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown", "duration": 0.3506920337677002, "run_index": 93, "setup": {"name": "setup", "duration": 0.017225027084350586, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31379103660583496, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestConnectionWithLUSERSMOTD object at 0x1054992b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x105479eb8>\n\n    def test_connect_lusers_motd_unknown(self, irc_session):\n        \"\"\"\n            Test correct values in LUSERS with two clients connected,\n            one of which is \"unknown\" (hasn't completed its registration)\n            \"\"\"\n    \n>       unknown1 = irc_session.get_client()\n\ntests/chirc/tests/test_lusers_motd.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1054795c0>, host = 'localhost'\nport = 30881, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LUSERS"}], "teardown": {"name": "teardown", "duration": 0.0024509429931640625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown2", "duration": 0.3456761837005615, "run_index": 94, "setup": {"name": "setup", "duration": 0.01526498794555664, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3123772144317627, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestConnectionWithLUSERSMOTD object at 0x1054201d0>\nirc_session = <chirc.tests.common.IRCSession object at 0x105420080>\n\n    def test_connect_lusers_motd_unknown2(self, irc_session):\n        \"\"\"\n            Test correct values in LUSERS with two clients connected,\n            one of which is \"unknown\" (hasn't completed its registration,\n            but has sent a NICK command)\n            \"\"\"\n>       unknown1 = irc_session.get_client()\n\ntests/chirc/tests/test_lusers_motd.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105420e48>, host = 'localhost'\nport = 44553, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LUSERS"}], "teardown": {"name": "teardown", "duration": 0.002768993377685547, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestConnectionWithLUSERSMOTD::()::test_connect_lusers_motd_unknown3", "duration": 0.34842562675476074, "run_index": 95, "setup": {"name": "setup", "duration": 0.016944169998168945, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31204819679260254, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestConnectionWithLUSERSMOTD object at 0x105366048>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051c60b8>\n\n    def test_connect_lusers_motd_unknown3(self, irc_session):\n        \"\"\"\n            Test correct values in LUSERS with five clients connected,\n            four of which are \"unknown\" (haven't completed its registration)\n            \"\"\"\n>       unknown1 = irc_session.get_client()\n\ntests/chirc/tests/test_lusers_motd.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10549d278>, host = 'localhost'\nport = 40233, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LUSERS"}], "teardown": {"name": "teardown", "duration": 0.0024890899658203125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers1", "duration": 0.3501412868499756, "run_index": 96, "setup": {"name": "setup", "duration": 0.015897035598754883, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31514906883239746, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x105097390>\nirc_session = <chirc.tests.common.IRCSession object at 0x105097a90>\n\n    @pytest.mark.category(\"LUSERS\")\n    def test_lusers1(self, irc_session):\n        \"\"\"\n            Test calling LUSERS explicitly with one client.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_lusers_motd.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105097208>, host = 'localhost'\nport = 47677, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LUSERS"}], "teardown": {"name": "teardown", "duration": 0.0031981468200683594, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers2", "duration": 0.3482844829559326, "run_index": 97, "setup": {"name": "setup", "duration": 0.015430212020874023, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3146250247955322, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x105551518>\nirc_session = <chirc.tests.common.IRCSession object at 0x10524a0b8>\n\n    @pytest.mark.category(\"LUSERS\")\n    def test_lusers2(self, irc_session):\n        \"\"\"\n            Test calling LUSERS explicitly with four clients.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(4)\n\ntests/chirc/tests/test_lusers_motd.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10524a2e8>, host = 'localhost'\nport = 46226, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "LUSERS"}], "teardown": {"name": "teardown", "duration": 0.0027990341186523438, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers_channels1", "duration": 0.34624409675598145, "run_index": 98, "setup": {"name": "setup", "duration": 0.015655040740966797, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3125009536743164, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x105542cf8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105542400>\n\n    @pytest.mark.category(\"UPDATE_ASSIGNMENT2\")\n    def test_lusers_channels1(self, irc_session):\n        \"\"\"\n            Test calling LUSERS with a server with nine users (user1-user9)\n            where the users are in the following channels:\n    \n            #test1: user1, user2, user3\n            #test2: user4, user5, user6\n            #test3: user7, user8, user9\n            \"\"\"\n    \n>       users = irc_session.connect_and_join_channels(channels1)\n\ntests/chirc/tests/test_lusers_motd.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105542fd0>, host = 'localhost'\nport = 34561, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.0024330615997314453, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers_channels2", "duration": 0.3516662120819092, "run_index": 99, "setup": {"name": "setup", "duration": 0.01615619659423828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3168349266052246, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x10451a630>\nirc_session = <chirc.tests.common.IRCSession object at 0x105570780>\n\n    @pytest.mark.category(\"UPDATE_ASSIGNMENT2\")\n    def test_lusers_channels2(self, irc_session):\n        \"\"\"\n            Test calling LUSERS with a server with eleven users (user1-user11)\n            where the users are in the following channels:\n    \n            #test1: user1, user2, user3\n            #test2: user4, user5, user6\n            #test3: user7, user8, user9\n    \n            Not in a channel: user10, user11\n            \"\"\"\n    \n>       users = irc_session.connect_and_join_channels(channels2)\n\ntests/chirc/tests/test_lusers_motd.py:228: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105570748>, host = 'localhost'\nport = 14072, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.002518892288208008, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers_channels3", "duration": 0.34751033782958984, "run_index": 100, "setup": {"name": "setup", "duration": 0.016083955764770508, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3125321865081787, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x105208e10>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052085f8>\n\n    @pytest.mark.category(\"UPDATE_ASSIGNMENT2\")\n    def test_lusers_channels3(self, irc_session):\n        \"\"\"\n            Test calling LUSERS with a server with eleven users (user1-user11)\n            where the users are in the following channels:\n    \n            #test1: user1, user2, user3\n            #test2: user2\n            #test3: user3, user4, user5, user6\n            #test4: user7, user8, user9, user1, user2\n            #test5: user1, user5\n    \n            Not in a channel: user10, user11\n            \"\"\"\n    \n>       users = irc_session.connect_and_join_channels(channels3)\n\ntests/chirc/tests/test_lusers_motd.py:253: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1051b5e80>, host = 'localhost'\nport = 14759, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.002810239791870117, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers_ircops1", "duration": 0.3408236503601074, "run_index": 101, "setup": {"name": "setup", "duration": 0.01481485366821289, "outcome": "passed"}, "call": {"name": "call", "duration": 0.30865478515625, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x10551ff60>\nirc_session = <chirc.tests.common.IRCSession object at 0x10551fc18>\n\n    @pytest.mark.category(\"UPDATE_ASSIGNMENT2\")\n    def test_lusers_ircops1(self, irc_session):\n        \"\"\"\n            Test calling LUSERS explicitly with four clients,\n            one of which is a IRCop.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(4)\n\ntests/chirc/tests/test_lusers_motd.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10551f5c0>, host = 'localhost'\nport = 15583, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.0025391578674316406, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers_ircops2", "duration": 0.348358154296875, "run_index": 102, "setup": {"name": "setup", "duration": 0.016779184341430664, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3115389347076416, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x105188b70>\nirc_session = <chirc.tests.common.IRCSession object at 0x1051882b0>\n\n    @pytest.mark.category(\"UPDATE_ASSIGNMENT2\")\n    def test_lusers_ircops2(self, irc_session):\n        \"\"\"\n            Test calling LUSERS explicitly with four clients,\n            two of which are IRCops.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(4)\n\ntests/chirc/tests/test_lusers_motd.py:293: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105188d30>, host = 'localhost'\nport = 18873, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.0032608509063720703, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestLUSERS::()::test_lusers_channels_and_ircops", "duration": 0.3472254276275635, "run_index": 103, "setup": {"name": "setup", "duration": 0.014744043350219727, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31514906883239746, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x105208cf8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1045214e0>\n\n    @pytest.mark.category(\"UPDATE_ASSIGNMENT2\")\n    def test_lusers_channels_and_ircops(self, irc_session):\n        \"\"\"\n            Test calling LUSERS with a server with eleven users (user1-user11)\n            where the users are in the following channels:\n    \n            #test1: user1, user2, user3\n            #test2: user2\n            #test3: user3, user4, user5, user6\n            #test4: user7, user8, user9, user1, user2\n            #test5: user1, user5\n    \n            Not in a channel: user10, user11\n    \n            Additionally, user2 and user5 are IRCops.\n            \"\"\"\n    \n>       users = irc_session.connect_and_join_channels(channels3, ircops = [\"user2\", \"user5\"])\n\ntests/chirc/tests/test_lusers_motd.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1053ccc50>, host = 'localhost'\nport = 27503, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.0025882720947265625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd1", "duration": 0.3483879566192627, "run_index": 104, "setup": {"name": "setup", "duration": 0.01653003692626953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3126530647277832, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestMOTD object at 0x105535358>\nirc_session = <chirc.tests.common.IRCSession object at 0x105535a90>\n\n    def test_motd1(self, irc_session):\n        \"\"\"\n            Test calling MOTD where the MOTD file contains the following\n            (newlines are shown as \"\\n\" and the end of the file as <EOF>):\n    \n            AAA\\n\n            BBB\\n\n            CCC\\n\n            DDD<EOF>\n    \n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_lusers_motd.py:375: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105535dd8>, host = 'localhost'\nport = 17643, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MOTD"}], "teardown": {"name": "teardown", "duration": 0.0026748180389404297, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_lusers_motd.py::TestMOTD::()::test_motd2", "duration": 0.3470165729522705, "run_index": 105, "setup": {"name": "setup", "duration": 0.015155315399169922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31410789489746094, "outcome": "failed", "longrepr": "self = <chirc.tests.test_lusers_motd.TestMOTD object at 0x1050f5e10>\nirc_session = <chirc.tests.common.IRCSession object at 0x105188588>\n\n    def test_motd2(self, irc_session):\n        \"\"\"\n            Test calling MOTD where the MOTD file contains the following\n            (newlines are shown as \"\\n\" and the end of the file as <EOF>):\n    \n            AAA\\n\n            BBB\\n\n            CCC\\n\n            DDD\\n\n            <EOF>\n    \n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_lusers_motd.py:402: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105188dd8>, host = 'localhost'\nport = 19529, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MOTD"}], "teardown": {"name": "teardown", "duration": 0.0025980472564697266, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestOPER::()::test_oper1", "duration": 0.347217321395874, "run_index": 106, "setup": {"name": "setup", "duration": 0.016602039337158203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3114781379699707, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestOPER object at 0x105499c18>\nirc_session = <chirc.tests.common.IRCSession object at 0x105499438>\n\n    def test_oper1(self, irc_session):\n        \"\"\"\n            Tests giving a user (user1) IRCop privileges.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1054990f0>, host = 'localhost'\nport = 48374, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "OPER"}], "teardown": {"name": "teardown", "duration": 0.002535104751586914, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestOPER::()::test_oper2", "duration": 0.35141587257385254, "run_index": 107, "setup": {"name": "setup", "duration": 0.01588296890258789, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3168210983276367, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestOPER object at 0x1052c96d8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052c9c88>\n\n    def test_oper2(self, irc_session):\n        \"\"\"\n            Tests giving a user (user1) IRCop privileges, but providing\n            an incorrect password.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105654a20>, host = 'localhost'\nport = 27998, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "OPER"}], "teardown": {"name": "teardown", "duration": 0.002828836441040039, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode01", "duration": 0.35169172286987305, "run_index": 108, "setup": {"name": "setup", "duration": 0.01646590232849121, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31618404388427734, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1050c7f28>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050c7320>\n\n    def test_user_mode01(self, irc_session):\n        \"\"\"\n            The user tries to give itself IRCop status using MODE.\n            This is not allowed, but there is no error reply. There is simply\n            no relay of the MODE\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050c7e80>, host = 'localhost'\nport = 37044, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0025758743286132812, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode02", "duration": 0.34795427322387695, "run_index": 109, "setup": {"name": "setup", "duration": 0.014958620071411133, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3152801990509033, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1055432e8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055439b0>\n\n    def test_user_mode02(self, irc_session):\n        \"\"\"\n            The user tries to remove IRCop status from itself using MODE\n            (and the user is not already an IRCop) A non-IRCop can't\n            modify the the 'o' user mode, but since the user isn't\n            an IRCop, requesting -o has no effect, and the MODE\n            is relayed back (because it is accurate: the user is not\n            an IRCop)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050b8828>, host = 'localhost'\nport = 55957, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002756834030151367, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode03", "duration": 0.34820055961608887, "run_index": 110, "setup": {"name": "setup", "duration": 0.016511917114257812, "outcome": "passed"}, "call": {"name": "call", "duration": 0.312640905380249, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1051c6c50>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055354a8>\n\n    def test_user_mode03(self, irc_session):\n        \"\"\"\n            The user tries to go away using MODE instead of AWAY.\n            This is not allowed, but there is no error reply.\n            There is simply no relay of the MODE\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105535eb8>, host = 'localhost'\nport = 31549, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0025358200073242188, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode04", "duration": 0.3530538082122803, "run_index": 111, "setup": {"name": "setup", "duration": 0.01787090301513672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3147709369659424, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1050f9780>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050f9f98>\n\n    def test_user_mode04(self, irc_session):\n        \"\"\"\n            The user tries to return from away using MODE instead of AWAY.\n            This is not allowed, but there is no error reply.\n            There is simply no relay of the MODE\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050f96d8>, host = 'localhost'\nport = 47258, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002541065216064453, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode05", "duration": 0.3458561897277832, "run_index": 112, "setup": {"name": "setup", "duration": 0.015943050384521484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31145620346069336, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x10547d908>\nirc_session = <chirc.tests.common.IRCSession object at 0x10547da20>\n\n    def test_user_mode05(self, irc_session):\n        \"\"\"\n            The user tries to set its \"v\" mode. This is a valid member status mode,\n            but not a valid user mode. ERR_UMODEUNKNOWNFLAG should be returned.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10547d748>, host = 'localhost'\nport = 20363, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002513885498046875, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode06", "duration": 0.3516967296600342, "run_index": 113, "setup": {"name": "setup", "duration": 0.017647981643676758, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31389284133911133, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105446e10>\nirc_session = <chirc.tests.common.IRCSession object at 0x1054464a8>\n\n    def test_user_mode06(self, irc_session):\n        \"\"\"\n            The user tries to unset its \"v\" mode. This is a valid member status mode,\n            but not a valid user mode. ERR_UMODEUNKNOWNFLAG should be returned.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105446d30>, host = 'localhost'\nport = 23489, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002507925033569336, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode07", "duration": 0.3441038131713867, "run_index": 114, "setup": {"name": "setup", "duration": 0.015101909637451172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31125402450561523, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1050b87f0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10540c978>\n\n    def test_user_mode07(self, irc_session):\n        \"\"\"\n            The user tries to set its \"t\" mode. This is a valid channel mode,\n            but not a valid user mode. ERR_UMODEUNKNOWNFLAG should be returned.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10545fcf8>, host = 'localhost'\nport = 24019, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026459693908691406, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode08", "duration": 0.3501889705657959, "run_index": 115, "setup": {"name": "setup", "duration": 0.01617288589477539, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3153519630432129, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1052dfc50>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052dfd68>\n\n    def test_user_mode08(self, irc_session):\n        \"\"\"\n            The user tries to unset its \"t\" mode. This is a valid channel mode,\n            but not a valid user mode. ERR_UMODEUNKNOWNFLAG should be returned.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10536e9b0>, host = 'localhost'\nport = 21845, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0024912357330322266, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode09", "duration": 0.34755611419677734, "run_index": 116, "setup": {"name": "setup", "duration": 0.017612934112548828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3099031448364258, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056f0438>\nirc_session = <chirc.tests.common.IRCSession object at 0x105338dd8>\n\n    def test_user_mode09(self, irc_session):\n        \"\"\"\n            The user tries to set its \"z\" mode. This is not a supported mode\n            in chIRC, so ERR_UMODEUNKNOWNFLAG should be returned.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10552a9e8>, host = 'localhost'\nport = 44357, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0024271011352539062, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode10", "duration": 0.34974122047424316, "run_index": 117, "setup": {"name": "setup", "duration": 0.01770496368408203, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3117241859436035, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x10547c160>\nirc_session = <chirc.tests.common.IRCSession object at 0x10547ce80>\n\n    def test_user_mode10(self, irc_session):\n        \"\"\"\n            The user tries to unset its \"z\" mode. This is not a supported mode\n            in chIRC, so ERR_UMODEUNKNOWNFLAG should be returned.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10547cef0>, host = 'localhost'\nport = 59078, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002607107162475586, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode11", "duration": 0.34992432594299316, "run_index": 118, "setup": {"name": "setup", "duration": 0.01600503921508789, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3153879642486572, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105391b70>\nirc_session = <chirc.tests.common.IRCSession object at 0x1053918d0>\n\n    def test_user_mode11(self, irc_session):\n        \"\"\"\n            The user tries to unset the \"o\" mode for another user.\n    \n            ERR_USERSDONTMATCH should be returned.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105391e10>, host = 'localhost'\nport = 40144, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0025262832641601562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_user_mode12", "duration": 0.3502662181854248, "run_index": 119, "setup": {"name": "setup", "duration": 0.01772904396057129, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31217026710510254, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1054ae588>\nirc_session = <chirc.tests.common.IRCSession object at 0x1054aec88>\n\n    def test_user_mode12(self, irc_session):\n        \"\"\"\n            The user tries to unset the \"z\" mode for another user.\n    \n            ERR_USERSDONTMATCH should be returned (even though \"z\" is not a valid user mode)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1054ae940>, host = 'localhost'\nport = 17905, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026378631591796875, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode01", "duration": 0.3489561080932617, "run_index": 120, "setup": {"name": "setup", "duration": 0.017045021057128906, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3117220401763916, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x10547d9b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10547da20>\n\n    def test_channel_mode01(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it to be moderated (+m)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105600748>, host = 'localhost'\nport = 26796, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0031440258026123047, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode02", "duration": 0.34957408905029297, "run_index": 121, "setup": {"name": "setup", "duration": 0.015053987503051758, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31695008277893066, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105607eb8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105607630>\n\n    def test_channel_mode02(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it so that only the channel\n            operator can change the topic (+t)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105607c18>, host = 'localhost'\nport = 20759, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002516031265258789, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode03", "duration": 0.34664011001586914, "run_index": 122, "setup": {"name": "setup", "duration": 0.015427112579345703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31283092498779297, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056b2240>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056b2e80>\n\n    def test_channel_mode03(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it so it will not be moderated (-m)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056b2780>, host = 'localhost'\nport = 27861, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0029549598693847656, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode04", "duration": 0.3460090160369873, "run_index": 123, "setup": {"name": "setup", "duration": 0.015132904052734375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3132481575012207, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x10564b240>\nirc_session = <chirc.tests.common.IRCSession object at 0x10564beb8>\n\n    def test_channel_mode04(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it so that anyone in the channel\n            can change the topic (+t)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10545fc50>, host = 'localhost'\nport = 19543, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0024950504302978516, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode05", "duration": 0.34469032287597656, "run_index": 124, "setup": {"name": "setup", "duration": 0.015537261962890625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3110678195953369, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056c46d8>\nirc_session = <chirc.tests.common.IRCSession object at 0x10569d0b8>\n\n    def test_channel_mode05(self, irc_session):\n        \"\"\"\n            A user joins a channel and tries to set an unsupported channel mode (+z)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056a1c50>, host = 'localhost'\nport = 17762, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0025479793548583984, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode06", "duration": 0.348102331161499, "run_index": 125, "setup": {"name": "setup", "duration": 0.015705108642578125, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3134651184082031, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105643f28>\nirc_session = <chirc.tests.common.IRCSession object at 0x105499f60>\n\n    def test_channel_mode06(self, irc_session):\n        \"\"\"\n            A user joins a channel and tries to set an unsupported channel mode (+o),\n            althought is _is_ a supported member status mode.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105499208>, host = 'localhost'\nport = 43182, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0032269954681396484, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode07", "duration": 0.35036659240722656, "run_index": 126, "setup": {"name": "setup", "duration": 0.01736593246459961, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31299495697021484, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105594c18>\nirc_session = <chirc.tests.common.IRCSession object at 0x105594a20>\n\n    def test_channel_mode07(self, irc_session):\n        \"\"\"\n            A user joins a channel and tries to set an unsupported channel mode (+v),\n            althought is _is_ a supported member status mode.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:253: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055943c8>, host = 'localhost'\nport = 47506, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026397705078125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode08", "duration": 0.34900331497192383, "run_index": 127, "setup": {"name": "setup", "duration": 0.016396045684814453, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31375813484191895, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105095278>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056c4470>\n\n    def test_channel_mode08(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it to be moderated (+m). Then it asks\n            for the channel modes, and checks that \"m\" is one of the modes.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056c4a20>, host = 'localhost'\nport = 35157, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0024530887603759766, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode09", "duration": 0.34720754623413086, "run_index": 128, "setup": {"name": "setup", "duration": 0.015270233154296875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31394100189208984, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105535d30>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055357f0>\n\n    def test_channel_mode09(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it to be moderated (+m) and so that\n            only channel operators can change the topic (+t). Then it asks\n            for the channel modes, and checks that \"m\" and \"t\" are modes of the channel.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105535cc0>, host = 'localhost'\nport = 21899, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0027260780334472656, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode10", "duration": 0.3444385528564453, "run_index": 129, "setup": {"name": "setup", "duration": 0.014883995056152344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3122117519378662, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056e5eb8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056e5550>\n\n    def test_channel_mode10(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it to be moderated (+m) and so that\n            only channel operators can change the topic (+t), then removes that mode (-t).\n            Then it asks for the channel modes, and checks that only \"m\" is set.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105510630>, host = 'localhost'\nport = 44894, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002458810806274414, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode11", "duration": 0.3482666015625, "run_index": 130, "setup": {"name": "setup", "duration": 0.015396833419799805, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31452393531799316, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1050acd68>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050ac9b0>\n\n    def test_channel_mode11(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it to be moderated (+m) and so that\n            only channel operators can change the topic (+t), then makes it unmoderated (-m).\n            Then it asks for the channel modes, and checks that only \"t\" is set.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:326: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050e5f60>, host = 'localhost'\nport = 59381, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0029489994049072266, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode12", "duration": 0.3519706726074219, "run_index": 131, "setup": {"name": "setup", "duration": 0.01810288429260254, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3131389617919922, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1055fca20>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055fc588>\n\n    def test_channel_mode12(self, irc_session):\n        \"\"\"\n            A user joins a channel and sets it to be moderated (+m) and so that\n            only channel operators can change the topic (+t), then removes both\n            those modes (-m and -t). Then it asks for the channel modes, and\n            checks that no modes are set.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:350: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055fc518>, host = 'localhost'\nport = 29873, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026259422302246094, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode13", "duration": 0.3467848300933838, "run_index": 132, "setup": {"name": "setup", "duration": 0.014570951461791992, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31461501121520996, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105638ba8>\nirc_session = <chirc.tests.common.IRCSession object at 0x105638470>\n\n    def test_channel_mode13(self, irc_session):\n        \"\"\"\n            A user joins a channel and asks for its modes. There should be none.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:375: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105638b38>, host = 'localhost'\nport = 14898, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0030279159545898438, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode14", "duration": 0.3485262393951416, "run_index": 133, "setup": {"name": "setup", "duration": 0.01699209213256836, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31197094917297363, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056bd550>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056bd0f0>\n\n    def test_channel_mode14(self, irc_session):\n        \"\"\"\n            A user tries to ask for the modes of a channel that doesn't exist.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056bd208>, host = 'localhost'\nport = 31468, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.00257110595703125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode15", "duration": 0.34751057624816895, "run_index": 134, "setup": {"name": "setup", "duration": 0.014923810958862305, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3150210380554199, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056e4a58>\nirc_session = <chirc.tests.common.IRCSession object at 0x10536e9b0>\n\n    def test_channel_mode15(self, irc_session):\n        \"\"\"\n            A user tries to set the mode of a channel that doesn't exist.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:398: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10536e0b8>, host = 'localhost'\nport = 18658, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002641916275024414, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode16", "duration": 0.34502577781677246, "run_index": 135, "setup": {"name": "setup", "duration": 0.015518903732299805, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31136298179626465, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1055ca8d0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055cae80>\n\n    def test_channel_mode16(self, irc_session):\n        \"\"\"\n            A user tries to set the mode of a channel that doesn't exist.\n            The specified mode is also not a valid channel mode (but we\n            don't get an error for that)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:410: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1057c24e0>, host = 'localhost'\nport = 42738, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002624988555908203, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode17", "duration": 0.34822916984558105, "run_index": 136, "setup": {"name": "setup", "duration": 0.015377044677734375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31272411346435547, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x10533c9b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056e5b38>\n\n    def test_channel_mode17(self, irc_session):\n        \"\"\"\n            Ten clients connect to the server, and they all join the same channel.\n    \n            The first user to join the channel (the operator) sets the channel to be\n            moderated.\n    \n            We check that everyone in the channel receives the relay of the MODE\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(10, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056e5a90>, host = 'localhost'\nport = 50865, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.004750967025756836, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channel_mode18", "duration": 0.3795807361602783, "run_index": 137, "setup": {"name": "setup", "duration": 0.02963995933532715, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31569886207580566, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1055c2a58>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055c2438>\n\n    def test_channel_mode18(self, irc_session):\n        \"\"\"\n            Two clients connect to the server and join the same channel.\n    \n            The first one should be granted operator privileges, the second one\n            shouldn't. The second tries to set the channel to be moderated (+m)\n            and is denied because channel operator privileges are required to do so\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055c2f60>, host = 'localhost'\nport = 59985, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.004601955413818359, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode01", "duration": 0.3490591049194336, "run_index": 138, "setup": {"name": "setup", "duration": 0.016035079956054688, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3142881393432617, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056bdb00>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056bdd30>\n\n    def test_channeluser_mode01(self, irc_session):\n        \"\"\"\n            A user tries to set another user's member status mode (in #test)\n            to +v. Neither the user nor the channel exist.\"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:458: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056bd278>, host = 'localhost'\nport = 32545, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0027008056640625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode02", "duration": 0.35306692123413086, "run_index": 139, "setup": {"name": "setup", "duration": 0.016169071197509766, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31822681427001953, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105600b70>\nirc_session = <chirc.tests.common.IRCSession object at 0x105600e80>\n\n    def test_channeluser_mode02(self, irc_session):\n        \"\"\"\n            Two users connect to the server. The first one joins #test, the second\n            one does not.\n    \n            The second user tries to set the first user's member status mode in #test\n            to +v. The second user does not have channel operator privileges in\n            #test, and cannot do this (the user is also not in the channel,\n            but the root cause of failure is the lack of privileges)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:474: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105600860>, host = 'localhost'\nport = 31803, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002501964569091797, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode03", "duration": 0.3512430191040039, "run_index": 140, "setup": {"name": "setup", "duration": 0.016067981719970703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31644296646118164, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056d8b38>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056d8e48>\n\n    def test_channeluser_mode03(self, irc_session):\n        \"\"\"\n            Two users connect to the server and they both join the #test channel.\n    \n            The second user tries to set the first user's member status mode in #test\n            to +v. The second user does not have channel operator privileges in\n            #test, and cannot do this.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:493: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056d8ac8>, host = 'localhost'\nport = 12849, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026640892028808594, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode04", "duration": 0.35246753692626953, "run_index": 141, "setup": {"name": "setup", "duration": 0.016399860382080078, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31696200370788574, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x10680dcc0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10680dda0>\n\n    def test_channeluser_mode04(self, irc_session):\n        \"\"\"\n            Two users connect to the server and they both join the #test channel.\n    \n            The first user tries to set the member status mode of a user that\n            is not in the server.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:509: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10531b0b8>, host = 'localhost'\nport = 40566, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002705812454223633, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode05", "duration": 0.34595537185668945, "run_index": 142, "setup": {"name": "setup", "duration": 0.01542520523071289, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3125438690185547, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1050d45c0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050d4630>\n\n    def test_channeluser_mode05(self, irc_session):\n        \"\"\"\n            Two users connect to the server and the first one joins the #test channel.\n    \n            The first user tries to set the member status mode of the second user\n            (who is not in the channel)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10459cd68>, host = 'localhost'\nport = 42978, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0025610923767089844, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode06", "duration": 0.35077762603759766, "run_index": 143, "setup": {"name": "setup", "duration": 0.016405820846557617, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3154768943786621, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1055fa470>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055fa240>\n\n    def test_channeluser_mode06(self, irc_session):\n        \"\"\"\n            Two users connect to the server and they both join the #test channel.\n    \n            The first user tries to set the second user's member status mode to\n            a mode that is not valid.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:543: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055fa160>, host = 'localhost'\nport = 38660, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0024890899658203125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode07", "duration": 0.3521997928619385, "run_index": 144, "setup": {"name": "setup", "duration": 0.017479896545410156, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31462693214416504, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1057f4710>\nirc_session = <chirc.tests.common.IRCSession object at 0x1057f40f0>\n\n    def test_channeluser_mode07(self, irc_session):\n        \"\"\"\n            Two users connect to the server and they both join the #test channel.\n    \n            The first user tries to set the second user's member status mode to\n            a mode that is not valid.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:559: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1057f4eb8>, host = 'localhost'\nport = 55774, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002613067626953125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode08", "duration": 0.34812140464782715, "run_index": 145, "setup": {"name": "setup", "duration": 0.016291141510009766, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3129439353942871, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x10563ad68>\nirc_session = <chirc.tests.common.IRCSession object at 0x105599390>\n\n    def test_channeluser_mode08(self, irc_session):\n        \"\"\"\n            Ten users connect to the server and they all join the #test channel.\n    \n            The first user to join the channel (the operator) gives voice privileges\n            to user2 (+v)\n    \n            We check that everyone in the channel receives the relay of the MODE\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(10, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:577: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105599710>, host = 'localhost'\nport = 42161, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002595186233520508, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode09", "duration": 0.3472325801849365, "run_index": 146, "setup": {"name": "setup", "duration": 0.01527094841003418, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31369996070861816, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x10559ce48>\nirc_session = <chirc.tests.common.IRCSession object at 0x10559c630>\n\n    def test_channeluser_mode09(self, irc_session):\n        \"\"\"\n            Ten users connect to the server and they all join the #test channel.\n    \n            The first user to join the channel (the operator) gives operator\n            privileges to user2 (+o)\n    \n            We check that everyone in the channel receives the relay of the MODE\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(10, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:597: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10559ceb8>, host = 'localhost'\nport = 58807, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.00299072265625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_channeluser_mode10", "duration": 0.3514537811279297, "run_index": 147, "setup": {"name": "setup", "duration": 0.017532825469970703, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31344103813171387, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056e4f60>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056f7128>\n\n    def test_channeluser_mode10(self, irc_session):\n        \"\"\"\n            Ten users connect to the server and they all join the #test channel.\n    \n            The following happens:\n    \n            - user1 gives user2 operator privileges in the channel. We check\n              that everyone receives the relay.\n            - user2 gives voice privileges to user3. We check that everyone\n              receives the relay.\n            - user1 takes away the operator privileges from user2. We check\n              that everyone receives the relay.\n            - user2 (who is no longer an operator) tries to give voice\n              privileges to user4 but is denied.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(5, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:623: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056f7f60>, host = 'localhost'\nport = 57898, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002947092056274414, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels01", "duration": 0.34719109535217285, "run_index": 148, "setup": {"name": "setup", "duration": 0.015529394149780273, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3129761219024658, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1056d83c8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056d87f0>\n\n    def test_connect_channels01(self, irc_session):\n        \"\"\"\n            Connects nine users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n            \"\"\"\n>       irc_session.connect_and_join_channels(channels1)\n\ntests/chirc/tests/test_modes.py:653: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:173: in connect_and_join_channels\n    client = self.connect_user(op, op)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056d8a90>, host = 'localhost'\nport = 51861, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0031561851501464844, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels02", "duration": 0.34772586822509766, "run_index": 149, "setup": {"name": "setup", "duration": 0.0157928466796875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.313539981842041, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x105510a58>\nirc_session = <chirc.tests.common.IRCSession object at 0x105510be0>\n\n    def test_connect_channels02(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators):\n    \n            #test1: @user1, user2, user3\n            #test2: @user4, user5, user6\n            #test3: @user7, user8, user9\n    \n            Not in a channel: user10, user11\n            \"\"\"\n>       irc_session.connect_and_join_channels(channels2)\n\ntests/chirc/tests/test_modes.py:668: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105510240>, host = 'localhost'\nport = 25011, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026001930236816406, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestMODE::()::test_connect_channels03", "duration": 0.34647274017333984, "run_index": 150, "setup": {"name": "setup", "duration": 0.015611886978149414, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3123478889465332, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestMODE object at 0x1057e85c0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1057e8860>\n\n    def test_connect_channels03(self, irc_session):\n        \"\"\"\n            Connects eleven users to the server, and has them join\n            the following channels, and set the following privileges:\n            (@ denotes channel operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n            \"\"\"\n>       irc_session.connect_and_join_channels(channels3)\n\ntests/chirc/tests/test_modes.py:685: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1057e8358>, host = 'localhost'\nport = 42512, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0029010772705078125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg1", "duration": 0.35289669036865234, "run_index": 151, "setup": {"name": "setup", "duration": 0.015825986862182617, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31790590286254883, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x105699f60>\nirc_session = <chirc.tests.common.IRCSession object at 0x105699dd8>\n\n    def test_permissions_privmsg1(self, irc_session):\n        \"\"\"\n            Test that, in a moderated channel, users without voice privileges\n            cannot send messages to the channel.\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+m\")\n\ntests/chirc/tests/test_modes.py:738: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105699390>, host = 'localhost'\nport = 19894, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0033388137817382812, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg2", "duration": 0.3502931594848633, "run_index": 152, "setup": {"name": "setup", "duration": 0.017229080200195312, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31328606605529785, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x106801208>\nirc_session = <chirc.tests.common.IRCSession object at 0x106801c18>\n\n    def test_permissions_privmsg2(self, irc_session):\n        \"\"\"\n            Test that, in a moderated channel, the channel operator\n            can send messages to the channel.\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+m\")\n\ntests/chirc/tests/test_modes.py:756: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106801d68>, host = 'localhost'\nport = 30266, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0025489330291748047, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg3", "duration": 0.3534717559814453, "run_index": 153, "setup": {"name": "setup", "duration": 0.017787933349609375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3146939277648926, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x10564c208>\nirc_session = <chirc.tests.common.IRCSession object at 0x10564c6d8>\n\n    def test_permissions_privmsg3(self, irc_session):\n        \"\"\"\n            Test that, in a moderated channel, a user with voice privileges\n            can send messages to the channel.\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+m\")\n\ntests/chirc/tests/test_modes.py:769: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10564c630>, host = 'localhost'\nport = 49404, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0032019615173339844, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg4", "duration": 0.34970855712890625, "run_index": 154, "setup": {"name": "setup", "duration": 0.016009807586669922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31455087661743164, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x105594128>\nirc_session = <chirc.tests.common.IRCSession object at 0x105594630>\n\n    def test_permissions_privmsg4(self, irc_session):\n        \"\"\"\n            Test that, in a moderated channel, a user who has been granted channel operator\n            privileges can send messages to the channel.\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+m\")\n\ntests/chirc/tests/test_modes.py:787: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055944a8>, host = 'localhost'\nport = 39029, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0031380653381347656, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_privmsg5", "duration": 0.3549337387084961, "run_index": 155, "setup": {"name": "setup", "duration": 0.016950130462646484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3180527687072754, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x1050d49b0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1050d4da0>\n\n    def test_permissions_privmsg5(self, irc_session):\n        \"\"\"\n            Test that, in a moderated channel, a user who has been granted\n            voice privileges and then has had them removed cannot send\n            messages to the channel.\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+m\")\n\ntests/chirc/tests/test_modes.py:806: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1050d4080>, host = 'localhost'\nport = 38184, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0029807090759277344, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_notice", "duration": 0.35089826583862305, "run_index": 156, "setup": {"name": "setup", "duration": 0.015101909637451172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3177967071533203, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x105699668>\nirc_session = <chirc.tests.common.IRCSession object at 0x105699dd8>\n\n    def test_permissions_notice(self, irc_session):\n        \"\"\"\n            Test that, in a moderated channel, a user who has does not\n            have voice privileges will not receive an error if they send\n            a NOTICE to the channel.\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+m\")\n\ntests/chirc/tests/test_modes.py:834: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056990b8>, host = 'localhost'\nport = 29551, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0028977394104003906, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic1", "duration": 0.34969258308410645, "run_index": 157, "setup": {"name": "setup", "duration": 0.015760183334350586, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3156301975250244, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x1055c2b38>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055c2e48>\n\n    def test_permissions_topic1(self, irc_session):\n        \"\"\"\n            Test that a user without channel operator privileges cannot\n            set the topic in a channel with the +t mode\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+t\")\n\ntests/chirc/tests/test_modes.py:850: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055c2e80>, host = 'localhost'\nport = 28783, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0025420188903808594, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_topic2", "duration": 0.35304927825927734, "run_index": 158, "setup": {"name": "setup", "duration": 0.017496109008789062, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3153800964355469, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x106899588>\nirc_session = <chirc.tests.common.IRCSession object at 0x106899240>\n\n    def test_permissions_topic2(self, irc_session):\n        \"\"\"\n            Test that a user who has been granted channel operator privileges can\n            set the topic in a channel with the +t mode\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+t\")\n\ntests/chirc/tests/test_modes.py:868: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106899f60>, host = 'localhost'\nport = 59321, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026769638061523438, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper1", "duration": 0.34413599967956543, "run_index": 159, "setup": {"name": "setup", "duration": 0.014997005462646484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3114199638366699, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x1050ac860>\nirc_session = <chirc.tests.common.IRCSession object at 0x105570438>\n\n    def test_permissions_oper1(self, irc_session):\n        \"\"\"\n            Check that an IRCop can set a channel to be moderated\n            not being a channel operator.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(3, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:889: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10689bf28>, host = 'localhost'\nport = 39043, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002722024917602539, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper2", "duration": 0.3497426509857178, "run_index": 160, "setup": {"name": "setup", "duration": 0.017081022262573242, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3128218650817871, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x10559c160>\nirc_session = <chirc.tests.common.IRCSession object at 0x10559c128>\n\n    def test_permissions_oper2(self, irc_session):\n        \"\"\"\n            Check that an IRCop can grant voice privileges to someone on a channel\n            despite not being a channel operator.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(3, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10559a7f0>, host = 'localhost'\nport = 43632, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0027587413787841797, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper3", "duration": 0.3515200614929199, "run_index": 161, "setup": {"name": "setup", "duration": 0.017319917678833008, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3142282962799072, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x10565c780>\nirc_session = <chirc.tests.common.IRCSession object at 0x10565cba8>\n\n    def test_permissions_oper3(self, irc_session):\n        \"\"\"\n            Check that an IRCop can grant operator privileges to someone on a channel\n            despite not being a channel operator.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(3, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:926: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10565c160>, host = 'localhost'\nport = 58301, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026519298553466797, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper4", "duration": 0.35064172744750977, "run_index": 162, "setup": {"name": "setup", "duration": 0.01610422134399414, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31574034690856934, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x1055fa908>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055fa9b0>\n\n    def test_permissions_oper4(self, irc_session):\n        \"\"\"\n            Check that an IRCop can send messages to a moderated channel despite\n            not being a channel operator.\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+m\")\n\ntests/chirc/tests/test_modes.py:944: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055fa2b0>, host = 'localhost'\nport = 18994, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.0026929378509521484, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestPermissions::()::test_permissions_oper5", "duration": 0.3475229740142822, "run_index": 163, "setup": {"name": "setup", "duration": 0.01662588119506836, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3115360736846924, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestPermissions object at 0x1057b4d30>\nirc_session = <chirc.tests.common.IRCSession object at 0x1057d1eb8>\n\n    def test_permissions_oper5(self, irc_session):\n        \"\"\"\n            Check that an IRCop can change the topic in a channel with +t despite\n            not being a channel operator.\n            \"\"\"\n    \n>       clients = self._join_and_mode(irc_session, 3, \"#test\", \"+t\")\n\ntests/chirc/tests/test_modes.py:958: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_modes.py:698: in _join_and_mode\n    clients = irc_session.connect_clients(numclients, join_channel = channel)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1057d1a20>, host = 'localhost'\nport = 30759, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "MODES"}], "teardown": {"name": "teardown", "duration": 0.002735137939453125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestAWAY::()::test_away1", "duration": 0.35079455375671387, "run_index": 164, "setup": {"name": "setup", "duration": 0.016281843185424805, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31560277938842773, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestAWAY object at 0x1052d4198>\nirc_session = <chirc.tests.common.IRCSession object at 0x1052d43c8>\n\n    def test_away1(self, irc_session):\n        \"\"\"\n            Makes a user go away.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:995: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1052d4668>, host = 'localhost'\nport = 13611, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "AWAY"}], "teardown": {"name": "teardown", "duration": 0.0026280879974365234, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestAWAY::()::test_away2", "duration": 0.3547539710998535, "run_index": 165, "setup": {"name": "setup", "duration": 0.017323017120361328, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3170309066772461, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestAWAY object at 0x1055b2ef0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055b27f0>\n\n    def test_away2(self, irc_session):\n        \"\"\"\n            Makes a user go away and then return from away.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:1005: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055b2a58>, host = 'localhost'\nport = 41740, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "AWAY"}], "teardown": {"name": "teardown", "duration": 0.0030770301818847656, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestAWAY::()::test_away3", "duration": 0.3523521423339844, "run_index": 166, "setup": {"name": "setup", "duration": 0.01755523681640625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3145179748535156, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestAWAY object at 0x1056543c8>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056542e8>\n\n    def test_away3(self, irc_session):\n        \"\"\"\n            Makes a user return from away (not already being away)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_modes.py:1016: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056548d0>, host = 'localhost'\nport = 48842, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "AWAY"}], "teardown": {"name": "teardown", "duration": 0.00272369384765625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestAWAY::()::test_away4", "duration": 0.349928617477417, "run_index": 167, "setup": {"name": "setup", "duration": 0.01594400405883789, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3142998218536377, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestAWAY object at 0x10682d5f8>\nirc_session = <chirc.tests.common.IRCSession object at 0x10682d320>\n\n    def test_away4(self, irc_session):\n        \"\"\"\n            Check that if a user contacts another user who is away,\n            they get the away message back.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2)\n\ntests/chirc/tests/test_modes.py:1027: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055b29b0>, host = 'localhost'\nport = 50587, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "AWAY"}], "teardown": {"name": "teardown", "duration": 0.0037407875061035156, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestAWAY::()::test_away5", "duration": 0.34950828552246094, "run_index": 168, "setup": {"name": "setup", "duration": 0.01673603057861328, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3134331703186035, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestAWAY object at 0x1069044e0>\nirc_session = <chirc.tests.common.IRCSession object at 0x106904ba8>\n\n    def test_away5(self, irc_session):\n        \"\"\"\n            Check that if a user contacts another user who is away,\n            and uses NOTICE, they get nothing back.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2)\n\ntests/chirc/tests/test_modes.py:1049: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106904a20>, host = 'localhost'\nport = 48603, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "AWAY"}], "teardown": {"name": "teardown", "duration": 0.0026030540466308594, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_modes.py::TestAWAY::()::test_away6", "duration": 0.34763026237487793, "run_index": 169, "setup": {"name": "setup", "duration": 0.015662193298339844, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31348085403442383, "outcome": "failed", "longrepr": "self = <chirc.tests.test_modes.TestAWAY object at 0x1056f7940>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056f7be0>\n\n    def test_away6(self, irc_session):\n        \"\"\"\n            Check that RPL_AWAY replies are only sent in response to messages\n            from users, not in response to messages sent to channels where\n            that the user is in.\n            \"\"\"\n    \n>       clients = irc_session.connect_clients(2, join_channel = \"#test\")\n\ntests/chirc/tests/test_modes.py:1070: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056f7b00>, host = 'localhost'\nport = 39625, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "AWAY"}], "teardown": {"name": "teardown", "duration": 0.002825021743774414, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_ping.py::TestPING::()::test_ping", "duration": 0.3491799831390381, "run_index": 170, "setup": {"name": "setup", "duration": 0.015028953552246094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31652212142944336, "outcome": "failed", "longrepr": "self = <chirc.tests.test_ping.TestPING object at 0x106844438>\nirc_session = <chirc.tests.common.IRCSession object at 0x106844128>\n\n    def test_ping(self, irc_session):\n        \"\"\"\n            Test sending a PING to the server, which should reply with a PONG.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_ping.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106844630>, host = 'localhost'\nport = 13023, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PING_PONG"}], "teardown": {"name": "teardown", "duration": 0.002599954605102539, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_ping.py::TestPING::()::test_multiping1", "duration": 0.3474137783050537, "run_index": 171, "setup": {"name": "setup", "duration": 0.015878915786743164, "outcome": "passed"}, "call": {"name": "call", "duration": 0.312999963760376, "outcome": "failed", "longrepr": "self = <chirc.tests.test_ping.TestPING object at 0x106803b38>\nirc_session = <chirc.tests.common.IRCSession object at 0x1068b7c18>\n\n    def test_multiping1(self, irc_session):\n        \"\"\"\n            Test five users connecting to the server and pinging it.\n            \"\"\"\n>       self._test_multiping(irc_session, 5, 5)\n\ntests/chirc/tests/test_ping.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_ping.py:35: in _test_multiping\n    client =  irc_session.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1068b7358>, host = 'localhost'\nport = 44566, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PING_PONG"}], "teardown": {"name": "teardown", "duration": 0.0026559829711914062, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_ping.py::TestPING::()::test_multiping2", "duration": 0.3595731258392334, "run_index": 172, "setup": {"name": "setup", "duration": 0.01683497428894043, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3222079277038574, "outcome": "failed", "longrepr": "self = <chirc.tests.test_ping.TestPING object at 0x106967e80>\nirc_session = <chirc.tests.common.IRCSession object at 0x106967978>\n\n    def test_multiping2(self, irc_session):\n        \"\"\"\n            Test ten users connecting to the server and five of them pinging it.\n            \"\"\"\n>       self._test_multiping(irc_session, 10, 5)\n\ntests/chirc/tests/test_ping.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_ping.py:35: in _test_multiping\n    client =  irc_session.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106967c18>, host = 'localhost'\nport = 14959, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PING_PONG"}], "teardown": {"name": "teardown", "duration": 0.003695249557495117, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_ping.py::TestPING::()::test_multiping3", "duration": 0.3459181785583496, "run_index": 173, "setup": {"name": "setup", "duration": 0.017318010330200195, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3087289333343506, "outcome": "failed", "longrepr": "self = <chirc.tests.test_ping.TestPING object at 0x1068b7320>\nirc_session = <chirc.tests.common.IRCSession object at 0x1068b7b00>\n\n    def test_multiping3(self, irc_session):\n        \"\"\"\n            Test twenty users connecting to the server and fifteen of them pinging it.\n            \"\"\"\n>       self._test_multiping(irc_session, 20, 15)\n\ntests/chirc/tests/test_ping.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_ping.py:35: in _test_multiping\n    client =  irc_session.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1068b7e48>, host = 'localhost'\nport = 54621, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PING_PONG"}], "teardown": {"name": "teardown", "duration": 0.002553224563598633, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_ping.py::TestPING::()::test_multiping4", "duration": 0.3424344062805176, "run_index": 174, "setup": {"name": "setup", "duration": 0.014519214630126953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31006598472595215, "outcome": "failed", "longrepr": "self = <chirc.tests.test_ping.TestPING object at 0x106959240>\nirc_session = <chirc.tests.common.IRCSession object at 0x106959898>\n\n    def test_multiping4(self, irc_session):\n        \"\"\"\n            Test fifty users connecting to the server and thirty-five of them pinging it.\n            \"\"\"\n>       self._test_multiping(irc_session, 50, 35)\n\ntests/chirc/tests/test_ping.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_ping.py:35: in _test_multiping\n    client =  irc_session.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106959438>, host = 'localhost'\nport = 21777, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PING_PONG"}], "teardown": {"name": "teardown", "duration": 0.0033299922943115234, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_ping.py::TestPONG::()::test_pong", "duration": 0.3479430675506592, "run_index": 175, "setup": {"name": "setup", "duration": 0.015772104263305664, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31371092796325684, "outcome": "failed", "longrepr": "self = <chirc.tests.test_ping.TestPONG object at 0x105780390>\nirc_session = <chirc.tests.common.IRCSession object at 0x10684b470>\n\n    def test_pong(self, irc_session):\n        \"\"\"\n            Test sending a PONG, which should receive no reply\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_ping.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10684b0f0>, host = 'localhost'\nport = 15638, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PING_PONG"}], "teardown": {"name": "teardown", "duration": 0.0026879310607910156, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg1", "duration": 0.34737181663513184, "run_index": 176, "setup": {"name": "setup", "duration": 0.014430046081542969, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3156459331512451, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestPRIVMSG object at 0x1056e4b38>\nirc_session = <chirc.tests.common.IRCSession object at 0x1057d15f8>\n\n    def test_privmsg1(self, irc_session):\n        \"\"\"\n            Test sending a PRIVMSG from user1 to user2\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_privmsg.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1045f2898>, host = 'localhost'\nport = 45990, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.0028657913208007812, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg2", "duration": 0.3478271961212158, "run_index": 177, "setup": {"name": "setup", "duration": 0.015553951263427734, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31407904624938965, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestPRIVMSG object at 0x106888748>\nirc_session = <chirc.tests.common.IRCSession object at 0x10519fef0>\n\n    def test_privmsg2(self, irc_session):\n        \"\"\"\n            Test sending one hundred PRIVMSGs from user1 to user2\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_privmsg.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10519f400>, host = 'localhost'\nport = 11512, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002640247344970703, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple1", "duration": 0.34746265411376953, "run_index": 178, "setup": {"name": "setup", "duration": 0.016297340393066406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3122670650482178, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestPRIVMSG object at 0x106852e10>\nirc_session = <chirc.tests.common.IRCSession object at 0x106852320>\n\n    def test_privmsg_multiple1(self, irc_session):\n        \"\"\"\n            Test two users sending one message to each other.\n            \"\"\"\n>       self._test_multi_clients(irc_session,2,1)\n\ntests/chirc/tests/test_privmsg.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_privmsg.py:43: in _test_multi_clients\n    clients = irc_session.connect_clients(numclients)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1068526d8>, host = 'localhost'\nport = 38135, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.0026009082794189453, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple2", "duration": 0.3461170196533203, "run_index": 179, "setup": {"name": "setup", "duration": 0.01497507095336914, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3135859966278076, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestPRIVMSG object at 0x105654278>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056540f0>\n\n    def test_privmsg_multiple2(self, irc_session):\n        \"\"\"\n            Test two users sending two messages to each other.\n            \"\"\"\n>       self._test_multi_clients(irc_session,2,2)\n\ntests/chirc/tests/test_privmsg.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_privmsg.py:43: in _test_multi_clients\n    clients = irc_session.connect_clients(numclients)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056547b8>, host = 'localhost'\nport = 16388, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002580881118774414, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple3", "duration": 0.3469514846801758, "run_index": 180, "setup": {"name": "setup", "duration": 0.015998125076293945, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3123891353607178, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestPRIVMSG object at 0x1057bec18>\nirc_session = <chirc.tests.common.IRCSession object at 0x1057be128>\n\n    def test_privmsg_multiple3(self, irc_session):\n        \"\"\"\n            Test four users sending two messages to each other.\n            \"\"\"\n>       self._test_multi_clients(irc_session,4,2)\n\ntests/chirc/tests/test_privmsg.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_privmsg.py:43: in _test_multi_clients\n    clients = irc_session.connect_clients(numclients)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1057bec50>, host = 'localhost'\nport = 40014, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002566099166870117, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple4", "duration": 0.3513007164001465, "run_index": 181, "setup": {"name": "setup", "duration": 0.01602792739868164, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3167428970336914, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestPRIVMSG object at 0x1055ab240>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055abd68>\n\n    def test_privmsg_multiple4(self, irc_session):\n        \"\"\"\n            Test ten users sending two messages to each other.\n            \"\"\"\n>       self._test_multi_clients(irc_session,10,2, msg_timeout = 2.5)\n\ntests/chirc/tests/test_privmsg.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_privmsg.py:43: in _test_multi_clients\n    clients = irc_session.connect_clients(numclients)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1057d1e80>, host = 'localhost'\nport = 52159, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002501964569091797, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_multiple5", "duration": 0.3474874496459961, "run_index": 182, "setup": {"name": "setup", "duration": 0.014954805374145508, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3149590492248535, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestPRIVMSG object at 0x105789e80>\nirc_session = <chirc.tests.common.IRCSession object at 0x10685bc18>\n\n    def test_privmsg_multiple5(self, irc_session):\n        \"\"\"\n            Test twenty users sending five messages to each other.\n            \"\"\"\n>       self._test_multi_clients(irc_session,20,5, msg_timeout = 5)\n\ntests/chirc/tests/test_privmsg.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/test_privmsg.py:43: in _test_multi_clients\n    clients = irc_session.connect_clients(numclients)\ntests/chirc/tests/common.py:147: in connect_clients\n    client =  self.connect_user(nick, username)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10685b860>, host = 'localhost'\nport = 14011, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.0026187896728515625, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestPRIVMSG::()::test_privmsg_nonick", "duration": 0.3499884605407715, "run_index": 183, "setup": {"name": "setup", "duration": 0.017513275146484375, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31237292289733887, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestPRIVMSG object at 0x106962518>\nirc_session = <chirc.tests.common.IRCSession object at 0x1045d66d8>\n\n    def test_privmsg_nonick(self, irc_session):\n        \"\"\"\n            Test sending a message to a user (user2) that does\n            not exist in the server\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_privmsg.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10519fa20>, host = 'localhost'\nport = 34172, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002588987350463867, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice", "duration": 0.3488461971282959, "run_index": 184, "setup": {"name": "setup", "duration": 0.015888690948486328, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3144259452819824, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestNOTICE object at 0x1056f9668>\nirc_session = <chirc.tests.common.IRCSession object at 0x1056f9048>\n\n    def test_notice(self, irc_session):\n        \"\"\"\n            Test sending a NOTICE from user1 to user2\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_privmsg.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1056f99e8>, host = 'localhost'\nport = 37924, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.0026428699493408203, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_privmsg.py::TestNOTICE::()::test_notice_nonick", "duration": 0.34810876846313477, "run_index": 185, "setup": {"name": "setup", "duration": 0.015339851379394531, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31489109992980957, "outcome": "failed", "longrepr": "self = <chirc.tests.test_privmsg.TestNOTICE object at 0x1055be5c0>\nirc_session = <chirc.tests.common.IRCSession object at 0x106860978>\n\n    def test_notice_nonick(self, irc_session):\n        \"\"\"\n            Test sending a NOTICE to a user (user2) that doesn't exist in the server.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_privmsg.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106860cf8>, host = 'localhost'\nport = 28255, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "PRIVMSG_NOTICE"}], "teardown": {"name": "teardown", "duration": 0.002537965774536133, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace1", "duration": 0.34922122955322266, "run_index": 186, "setup": {"name": "setup", "duration": 0.015697240829467773, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31526970863342285, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x10559a7f0>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055faa58>\n\n    def test_whitespace1(self, irc_session):\n        \"\"\"\n            Test connecting to the server and sending whitespace followed by \\r\\n\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_robustness.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055fa5f8>, host = 'localhost'\nport = 35087, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.002557039260864258, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace2", "duration": 0.35596442222595215, "run_index": 187, "setup": {"name": "setup", "duration": 0.017679691314697266, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31206202507019043, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x106821358>\nirc_session = <chirc.tests.common.IRCSession object at 0x106821860>\n\n    def test_whitespace2(self, irc_session):\n        \"\"\"\n            Test sending NICK and USER with leading and trailing whitespace.\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_robustness.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106821470>, host = 'localhost'\nport = 10329, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.008543014526367188, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace3", "duration": 0.3476691246032715, "run_index": 188, "setup": {"name": "setup", "duration": 0.016549110412597656, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31206393241882324, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x10689b390>\nirc_session = <chirc.tests.common.IRCSession object at 0x10689bf28>\n\n    def test_whitespace3(self, irc_session):\n        \"\"\"\n            Test sending NICK and USER with more than one space between parameters.\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_robustness.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10689b940>, host = 'localhost'\nport = 54582, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.0025069713592529297, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace4", "duration": 0.35400867462158203, "run_index": 189, "setup": {"name": "setup", "duration": 0.01743602752685547, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31651878356933594, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x106905f98>\nirc_session = <chirc.tests.common.IRCSession object at 0x106905be0>\n\n    def test_whitespace4(self, irc_session):\n        \"\"\"\n            Test sending NICK and USER with more than one space between parameters,\n            and with leading/trailing whitespace.\n            \"\"\"\n    \n>       client = irc_session.get_client()\n\ntests/chirc/tests/test_robustness.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106803128>, host = 'localhost'\nport = 22508, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.0026178359985351562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_whitespace5", "duration": 0.34596776962280273, "run_index": 190, "setup": {"name": "setup", "duration": 0.01532292366027832, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3127429485321045, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x1068aca58>\nirc_session = <chirc.tests.common.IRCSession object at 0x1068ac2b0>\n\n    def test_whitespace5(self, irc_session):\n        \"\"\"\n            Test connecting one client to the server, and then sending whitespace\n            followed by \\r\\n\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_robustness.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1068ac5c0>, host = 'localhost'\nport = 49626, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.0025789737701416016, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length1", "duration": 0.3480072021484375, "run_index": 191, "setup": {"name": "setup", "duration": 0.015048980712890625, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3149402141571045, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x1055fa940>\nirc_session = <chirc.tests.common.IRCSession object at 0x1055fa898>\n\n    def test_length1(self, irc_session):\n        \"\"\"\n            Test sending a message that is exactly 512 bytes long (including\n            the \\r\\n)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_robustness.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055fa4a8>, host = 'localhost'\nport = 51800, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.002969026565551758, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length2", "duration": 0.3506662845611572, "run_index": 192, "setup": {"name": "setup", "duration": 0.01604008674621582, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31595301628112793, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x105769438>\nirc_session = <chirc.tests.common.IRCSession object at 0x105769a20>\n\n    def test_length2(self, irc_session):\n        \"\"\"\n            Test sending a PRIVMSG message that is exactly 2048 bytes long.\n            The relayed PRIVMSG should be truncated.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_robustness.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x105769198>, host = 'localhost'\nport = 39504, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.0026330947875976562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length3", "duration": 0.3471856117248535, "run_index": 193, "setup": {"name": "setup", "duration": 0.015322685241699219, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3133571147918701, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x105773748>\nirc_session = <chirc.tests.common.IRCSession object at 0x1057739e8>\n\n    def test_length3(self, irc_session):\n        \"\"\"\n            Test sending two messages (one right after the other) that\n            are exactly 512 bytes long each (including the \\r\\n)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_robustness.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1068b7f60>, host = 'localhost'\nport = 20865, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.003183126449584961, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_robustness.py::TestRobustness::()::test_length4", "duration": 0.34778285026550293, "run_index": 194, "setup": {"name": "setup", "duration": 0.015990018844604492, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3130800724029541, "outcome": "failed", "longrepr": "self = <chirc.tests.test_robustness.TestRobustness object at 0x1057be978>\nirc_session = <chirc.tests.common.IRCSession object at 0x10559ac18>\n\n    def test_length4(self, irc_session):\n        \"\"\"\n            Test sending messages that are 510-515 bytes long (including the \\r\\n)\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_robustness.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055e9dd8>, host = 'localhost'\nport = 23007, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ROBUST"}], "teardown": {"name": "teardown", "duration": 0.0027227401733398438, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown1", "duration": 0.34857177734375, "run_index": 195, "setup": {"name": "setup", "duration": 0.016192913055419922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3135390281677246, "outcome": "failed", "longrepr": "self = <chirc.tests.test_unknown.TestUnknownCommands object at 0x106807630>\nirc_session = <chirc.tests.common.IRCSession object at 0x106807a90>\n\n    def test_unknown1(self, irc_session):\n        \"\"\"\n            Test sending an unknown command.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_unknown.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x106807c50>, host = 'localhost'\nport = 31947, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ERR_UNKNOWN"}], "teardown": {"name": "teardown", "duration": 0.002646923065185547, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown2", "duration": 0.35594630241394043, "run_index": 196, "setup": {"name": "setup", "duration": 0.01711726188659668, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31895875930786133, "outcome": "failed", "longrepr": "self = <chirc.tests.test_unknown.TestUnknownCommands object at 0x10684b0f0>\nirc_session = <chirc.tests.common.IRCSession object at 0x10684b668>\n\n    def test_unknown2(self, irc_session):\n        \"\"\"\n            Test sending an unknown command.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_unknown.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10684b320>, host = 'localhost'\nport = 13220, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ERR_UNKNOWN"}], "teardown": {"name": "teardown", "duration": 0.002753019332885742, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_unknown.py::TestUnknownCommands::()::test_unknown3", "duration": 0.3452112674713135, "run_index": 197, "setup": {"name": "setup", "duration": 0.015124082565307617, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31247401237487793, "outcome": "failed", "longrepr": "self = <chirc.tests.test_unknown.TestUnknownCommands object at 0x1057c7940>\nirc_session = <chirc.tests.common.IRCSession object at 0x1057c7a58>\n\n    def test_unknown3(self, irc_session):\n        \"\"\"\n            Test sending an unknown command.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_unknown.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1069084a8>, host = 'localhost'\nport = 37426, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "ERR_UNKNOWN"}], "teardown": {"name": "teardown", "duration": 0.0024890899658203125, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois1", "duration": 0.3514089584350586, "run_index": 198, "setup": {"name": "setup", "duration": 0.016125917434692383, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31644201278686523, "outcome": "failed", "longrepr": "self = <chirc.tests.test_whois.TestWHOIS object at 0x10684b6d8>\nirc_session = <chirc.tests.common.IRCSession object at 0x10684b4e0>\n\n    @pytest.mark.category(\"WHOIS\")\n    def test_whois1(self, irc_session):\n        \"\"\"\n            Test doing a WHOIS on a user (user2) that is not in any channels.\n            \"\"\"\n    \n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_whois.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10684ba90>, host = 'localhost'\nport = 19923, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "WHOIS"}], "teardown": {"name": "teardown", "duration": 0.0027151107788085938, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois_nonick", "duration": 0.3476121425628662, "run_index": 199, "setup": {"name": "setup", "duration": 0.01633620262145996, "outcome": "passed"}, "call": {"name": "call", "duration": 0.31237196922302246, "outcome": "failed", "longrepr": "self = <chirc.tests.test_whois.TestWHOIS object at 0x105792400>\nirc_session = <chirc.tests.common.IRCSession object at 0x105792f60>\n\n    @pytest.mark.category(\"WHOIS\")\n    def test_whois_nonick(self, irc_session):\n        \"\"\"\n            Test doing a WHOIS on a user (user2) that does not exist in the server.\n            \"\"\"\n    \n>       client1 = irc_session.connect_user(\"user1\", \"User One\")\n\ntests/chirc/tests/test_whois.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10563e630>, host = 'localhost'\nport = 54779, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "WHOIS"}], "teardown": {"name": "teardown", "duration": 0.002567768096923828, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois2", "duration": 0.35162854194641113, "run_index": 200, "setup": {"name": "setup", "duration": 0.01626420021057129, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3161771297454834, "outcome": "failed", "longrepr": "self = <chirc.tests.test_whois.TestWHOIS object at 0x10570df60>\nirc_session = <chirc.tests.common.IRCSession object at 0x10570d7f0>\n\n    @pytest.mark.category(\"UPDATE_ASSIGNMENT2\")\n    def test_whois2(self, irc_session):\n        \"\"\"\n            Given the following users and channels (@ denotes channel\n            operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n    \n            Test doing a WHOIS on user2\n            \"\"\"\n    \n>       users = irc_session.connect_and_join_channels(fixtures.channels3)\n\ntests/chirc/tests/test_whois.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x10570de48>, host = 'localhost'\nport = 53798, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.0029230117797851562, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/chirc/tests/test_whois.py::TestWHOIS::()::test_whois3", "duration": 0.3554344177246094, "run_index": 201, "setup": {"name": "setup", "duration": 0.01741313934326172, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3143470287322998, "outcome": "failed", "longrepr": "self = <chirc.tests.test_whois.TestWHOIS object at 0x105769470>\nirc_session = <chirc.tests.common.IRCSession object at 0x105769b70>\n\n    @pytest.mark.category(\"UPDATE_ASSIGNMENT2\")\n    def test_whois3(self, irc_session):\n        \"\"\"\n            Given the following users and channels (@ denotes channel\n            operators, and + denotes a user with voice privileges):\n    \n            #test1: @user1, user2, user3\n            #test2: @user2\n            #test3: @user3, @user4, user5, user6\n            #test4: @user7, +user8, +user9, user1, user2\n            #test5: @user1, @user5\n    \n            Not in a channel: user10, user11\n    \n            Where, additionally, user8 is an IRCop and is away.\n    \n            Test doing a WHOIS on user8\n            \"\"\"\n    \n>       users = irc_session.connect_and_join_channels(fixtures.channels3, aways=[\"user8\"], ircops=[\"user8\"])\n\ntests/chirc/tests/test_whois.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests/chirc/tests/common.py:161: in connect_and_join_channels\n    client = self.connect_user(user, user)\ntests/chirc/tests/common.py:131: in connect_user\n    client = self.get_client()\ntests/chirc/tests/common.py:122: in get_client\n    c = ChircClient(msg_timeout = self.msg_timeout, port=self.port, nodelay = nodelay)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <chirc.client.ChircClient object at 0x1055be898>, host = 'localhost'\nport = 25574, msg_timeout = 0.1, nodelay = False\n\n    def __init__(self, host = \"localhost\", port = 7776, msg_timeout = 0.1, nodelay=False):\n        self.host = host\n        self.port = port\n        self.msg_timeout = msg_timeout\n    \n        tries = 3\n    \n        while tries > 0:\n            try:\n                self.client = telnetlib.Telnet(\"localhost\", str(self.port), 1)\n                #self.client.set_debuglevel(100)\n                if nodelay:\n                    self.client.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                break\n            except Exception:\n                tries -= 1\n                time.sleep(0.1)\n    \n        if tries == 0:\n>           raise CouldNotConnectException()\nE           chirc.types.CouldNotConnectException\n\ntests/chirc/client.py:28: CouldNotConnectException"}, "metadata": [{"category": "UPDATE_ASSIGNMENT2"}], "teardown": {"name": "teardown", "duration": 0.006261110305786133, "outcome": "passed"}, "outcome": "failed"}], "summary": {"failed": 202, "num_tests": 202, "duration": 79.26103782653809}, "created_at": "2017-09-07 14:38:57.561257"}}